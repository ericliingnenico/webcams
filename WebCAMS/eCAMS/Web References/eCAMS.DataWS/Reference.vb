'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace eCAMS.DataWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="DataServiceSoap", [Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Object()))>  _
    Partial Public Class DataService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private FSPSavePartInventoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPDelegationListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPDelegationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPDelegationReasonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutFSPDelegationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelFSPDelegationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPCalendarOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBulletinOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutBulletinOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBulletinViewLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutBulletinViewLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSurveyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSurveyAnswerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutSurveyAnswerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutMerchantAcceptanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadMerchantSignedJobSheetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateJobClosureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutErrorLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutActionLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutSessionLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSessionLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAppAttributeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogApplicationAndAssignMIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CloseDeinstallJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClientClosureReasonsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClientTerminalConfigFieldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobFilterStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobDeviceTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobMethodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCallTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCallTypeSymptomOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSymptomFaultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAdditionalServiceTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateTIDBeforeLogJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogCallOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDeviceComponentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DuplicateJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCallOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCallsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSitesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSiteEquipmentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutSiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQuickFindListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTerminalJobListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDeviceListBySerialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDeviceBySerialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClientUpdateInfoFieldListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateJobInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClientProjectsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPJobsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPCallOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPCallsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GMapGetFSPJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPClosedJobsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPClosedJobWithOutstandingDeviceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPJobEquipmentHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPAllOpenJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPJobsForBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FSPBookJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPEscalateJobBookingReasonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EscalateFSPJobBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPOpenTaskListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutFSPTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddFSPTaskDeviceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CloseFSPTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPTaskJobPostDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPTaskViewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPClosedTasksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPJobClosureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPJobEquipmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DelFSPJobEquipmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFSPJobEquipmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddFSPJobEquipmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CloseFSPJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPJobPartsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DelFSPJobPartsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutFSPJobPartsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPPartsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutFSPMissingJobPartsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetMerchantDamagedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobKittedDeviceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConfirmKittedPartsUsageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SwapBundledSIMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPStockListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPDeviceListBySerialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPStockReceivedLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPStockReceivedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutFSPStockReceivedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddFSPStockReceivedLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CloseFSPStockReceivedAndSendReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPStockReturnedLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPStockReturnedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutFSPStockReturnedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddFSPStockReturnedLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CloseFSPStockReturnedAndSendReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPStockTakeLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPStockTakeTargetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPStockTakeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutFSPStockTakeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddFSPStockTakeLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CloseFSPStockTakeAndSendReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddFaultyOutOfBoxDeviceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPExceptionListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobExceptionListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPEscalateReasonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EscalateFSPJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddFSPJobNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReassignJobBackToDepotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPCJFPreJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPCJFJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPCJFOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GenerateFSPCJFOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPJobSheetDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FSPReAssignJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FSPReAssignJobExtOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAdminBulkJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutAdminBulkJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPChildrenExtOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPFamilyExtOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDownloadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutDownloadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDownloadsByURLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDownloadCategoryAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTechFixOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsTelstraFSPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsLiveDBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetJobAsFSPOnSiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FSPCallMerchantOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobFSPDownloadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPostcodeFSPAllocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMerchantAcceptanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPPartTranOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FSPSavePartTranReceivedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFSPPartInventoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.My.MySettings.Default.eCAMS_eCAMS_DataWS_DataService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event FSPSavePartInventoryCompleted As FSPSavePartInventoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPDelegationListCompleted As GetFSPDelegationListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPDelegationCompleted As GetFSPDelegationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPDelegationReasonCompleted As GetFSPDelegationReasonCompletedEventHandler
        
        '''<remarks/>
        Public Event PutFSPDelegationCompleted As PutFSPDelegationCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelFSPDelegationCompleted As CancelFSPDelegationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPCalendarCompleted As GetFSPCalendarCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBulletinCompleted As GetBulletinCompletedEventHandler
        
        '''<remarks/>
        Public Event PutBulletinCompleted As PutBulletinCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBulletinViewLogCompleted As GetBulletinViewLogCompletedEventHandler
        
        '''<remarks/>
        Public Event PutBulletinViewLogCompleted As PutBulletinViewLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSurveyCompleted As GetSurveyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSurveyAnswerCompleted As GetSurveyAnswerCompletedEventHandler
        
        '''<remarks/>
        Public Event PutSurveyAnswerCompleted As PutSurveyAnswerCompletedEventHandler
        
        '''<remarks/>
        Public Event PutMerchantAcceptanceCompleted As PutMerchantAcceptanceCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadMerchantSignedJobSheetCompleted As UploadMerchantSignedJobSheetCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateJobClosureCompleted As ValidateJobClosureCompletedEventHandler
        
        '''<remarks/>
        Public Event PutErrorLogCompleted As PutErrorLogCompletedEventHandler
        
        '''<remarks/>
        Public Event PutActionLogCompleted As PutActionLogCompletedEventHandler
        
        '''<remarks/>
        Public Event PutSessionLogCompleted As PutSessionLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSessionLogCompleted As GetSessionLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAppAttributeCompleted As GetAppAttributeCompletedEventHandler
        
        '''<remarks/>
        Public Event LogApplicationAndAssignMIDCompleted As LogApplicationAndAssignMIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobCountCompleted As GetJobCountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobCompleted As GetJobCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobsCompleted As GetJobsCompletedEventHandler
        
        '''<remarks/>
        Public Event CloseDeinstallJobCompleted As CloseDeinstallJobCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClientClosureReasonsCompleted As GetClientClosureReasonsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClientTerminalConfigFieldCompleted As GetClientTerminalConfigFieldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStateCompleted As GetStateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobFilterStatusCompleted As GetJobFilterStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobDeviceTypeCompleted As GetJobDeviceTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobMethodCompleted As GetJobMethodCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCallTypeCompleted As GetCallTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCallTypeSymptomCompleted As GetCallTypeSymptomCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSymptomFaultCompleted As GetSymptomFaultCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAdditionalServiceTypeCompleted As GetAdditionalServiceTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateTIDBeforeLogJobCompleted As ValidateTIDBeforeLogJobCompletedEventHandler
        
        '''<remarks/>
        Public Event LogJobCompleted As LogJobCompletedEventHandler
        
        '''<remarks/>
        Public Event LogCallCompleted As LogCallCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDeviceComponentCompleted As GetDeviceComponentCompletedEventHandler
        
        '''<remarks/>
        Public Event DuplicateJobCompleted As DuplicateJobCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCallCompleted As GetCallCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCallsCompleted As GetCallsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSiteCompleted As GetSiteCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSitesCompleted As GetSitesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSiteEquipmentsCompleted As GetSiteEquipmentsCompletedEventHandler
        
        '''<remarks/>
        Public Event PutSiteCompleted As PutSiteCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQuickFindListCompleted As GetQuickFindListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTerminalJobListCompleted As GetTerminalJobListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDeviceListBySerialCompleted As GetDeviceListBySerialCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDeviceBySerialCompleted As GetDeviceBySerialCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClientUpdateInfoFieldListCompleted As GetClientUpdateInfoFieldListCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateJobInfoCompleted As UpdateJobInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClientProjectsCompleted As GetClientProjectsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomersCompleted As GetCustomersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPJobCompleted As GetFSPJobCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPJobsCompleted As GetFSPJobsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPCallCompleted As GetFSPCallCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPCallsCompleted As GetFSPCallsCompletedEventHandler
        
        '''<remarks/>
        Public Event GMapGetFSPJobCompleted As GMapGetFSPJobCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPClosedJobsCompleted As GetFSPClosedJobsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPClosedJobWithOutstandingDeviceCompleted As GetFSPClosedJobWithOutstandingDeviceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPJobEquipmentHistoryCompleted As GetFSPJobEquipmentHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPAllOpenJobCompleted As GetFSPAllOpenJobCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPJobsForBookingCompleted As GetFSPJobsForBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event FSPBookJobCompleted As FSPBookJobCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPEscalateJobBookingReasonCompleted As GetFSPEscalateJobBookingReasonCompletedEventHandler
        
        '''<remarks/>
        Public Event EscalateFSPJobBookingCompleted As EscalateFSPJobBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPOpenTaskListCompleted As GetFSPOpenTaskListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPTaskCompleted As GetFSPTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event PutFSPTaskCompleted As PutFSPTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event AddFSPTaskDeviceCompleted As AddFSPTaskDeviceCompletedEventHandler
        
        '''<remarks/>
        Public Event CloseFSPTaskCompleted As CloseFSPTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPTaskJobPostDataCompleted As GetFSPTaskJobPostDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPTaskViewCompleted As GetFSPTaskViewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPClosedTasksCompleted As GetFSPClosedTasksCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPJobClosureCompleted As GetFSPJobClosureCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPJobEquipmentCompleted As GetFSPJobEquipmentCompletedEventHandler
        
        '''<remarks/>
        Public Event DelFSPJobEquipmentCompleted As DelFSPJobEquipmentCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFSPJobEquipmentCompleted As UpdateFSPJobEquipmentCompletedEventHandler
        
        '''<remarks/>
        Public Event AddFSPJobEquipmentCompleted As AddFSPJobEquipmentCompletedEventHandler
        
        '''<remarks/>
        Public Event CloseFSPJobCompleted As CloseFSPJobCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPJobPartsCompleted As GetFSPJobPartsCompletedEventHandler
        
        '''<remarks/>
        Public Event DelFSPJobPartsCompleted As DelFSPJobPartsCompletedEventHandler
        
        '''<remarks/>
        Public Event PutFSPJobPartsCompleted As PutFSPJobPartsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPPartsCompleted As GetFSPPartsCompletedEventHandler
        
        '''<remarks/>
        Public Event PutFSPMissingJobPartsCompleted As PutFSPMissingJobPartsCompletedEventHandler
        
        '''<remarks/>
        Public Event SetMerchantDamagedCompleted As SetMerchantDamagedCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobKittedDeviceCompleted As GetJobKittedDeviceCompletedEventHandler
        
        '''<remarks/>
        Public Event ConfirmKittedPartsUsageCompleted As ConfirmKittedPartsUsageCompletedEventHandler
        
        '''<remarks/>
        Public Event SwapBundledSIMCompleted As SwapBundledSIMCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPStockListCompleted As GetFSPStockListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPDeviceListBySerialCompleted As GetFSPDeviceListBySerialCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPStockReceivedLogCompleted As GetFSPStockReceivedLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPStockReceivedCompleted As GetFSPStockReceivedCompletedEventHandler
        
        '''<remarks/>
        Public Event PutFSPStockReceivedCompleted As PutFSPStockReceivedCompletedEventHandler
        
        '''<remarks/>
        Public Event AddFSPStockReceivedLogCompleted As AddFSPStockReceivedLogCompletedEventHandler
        
        '''<remarks/>
        Public Event CloseFSPStockReceivedAndSendReportCompleted As CloseFSPStockReceivedAndSendReportCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPStockReturnedLogCompleted As GetFSPStockReturnedLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPStockReturnedCompleted As GetFSPStockReturnedCompletedEventHandler
        
        '''<remarks/>
        Public Event PutFSPStockReturnedCompleted As PutFSPStockReturnedCompletedEventHandler
        
        '''<remarks/>
        Public Event AddFSPStockReturnedLogCompleted As AddFSPStockReturnedLogCompletedEventHandler
        
        '''<remarks/>
        Public Event CloseFSPStockReturnedAndSendReportCompleted As CloseFSPStockReturnedAndSendReportCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPStockTakeLogCompleted As GetFSPStockTakeLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPStockTakeTargetCompleted As GetFSPStockTakeTargetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPStockTakeCompleted As GetFSPStockTakeCompletedEventHandler
        
        '''<remarks/>
        Public Event PutFSPStockTakeCompleted As PutFSPStockTakeCompletedEventHandler
        
        '''<remarks/>
        Public Event AddFSPStockTakeLogCompleted As AddFSPStockTakeLogCompletedEventHandler
        
        '''<remarks/>
        Public Event CloseFSPStockTakeAndSendReportCompleted As CloseFSPStockTakeAndSendReportCompletedEventHandler
        
        '''<remarks/>
        Public Event AddFaultyOutOfBoxDeviceCompleted As AddFaultyOutOfBoxDeviceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPExceptionListCompleted As GetFSPExceptionListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobExceptionListCompleted As GetJobExceptionListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPEscalateReasonCompleted As GetFSPEscalateReasonCompletedEventHandler
        
        '''<remarks/>
        Public Event EscalateFSPJobCompleted As EscalateFSPJobCompletedEventHandler
        
        '''<remarks/>
        Public Event AddFSPJobNoteCompleted As AddFSPJobNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event ReassignJobBackToDepotCompleted As ReassignJobBackToDepotCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPCJFPreJobCompleted As GetFSPCJFPreJobCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPCJFJobCompleted As GetFSPCJFJobCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPCJFCompleted As GetFSPCJFCompletedEventHandler
        
        '''<remarks/>
        Public Event GenerateFSPCJFCompleted As GenerateFSPCJFCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPJobSheetDataCompleted As GetFSPJobSheetDataCompletedEventHandler
        
        '''<remarks/>
        Public Event FSPReAssignJobCompleted As FSPReAssignJobCompletedEventHandler
        
        '''<remarks/>
        Public Event FSPReAssignJobExtCompleted As FSPReAssignJobExtCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAdminBulkJobCompleted As GetAdminBulkJobCompletedEventHandler
        
        '''<remarks/>
        Public Event PutAdminBulkJobCompleted As PutAdminBulkJobCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPChildrenExtCompleted As GetFSPChildrenExtCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPFamilyExtCompleted As GetFSPFamilyExtCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDownloadCompleted As GetDownloadCompletedEventHandler
        
        '''<remarks/>
        Public Event PutDownloadCompleted As PutDownloadCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDownloadsByURLCompleted As GetDownloadsByURLCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDownloadCategoryAllCompleted As GetDownloadCategoryAllCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTechFixCompleted As GetTechFixCompletedEventHandler
        
        '''<remarks/>
        Public Event IsTelstraFSPCompleted As IsTelstraFSPCompletedEventHandler
        
        '''<remarks/>
        Public Event IsLiveDBCompleted As IsLiveDBCompletedEventHandler
        
        '''<remarks/>
        Public Event SetJobAsFSPOnSiteCompleted As SetJobAsFSPOnSiteCompletedEventHandler
        
        '''<remarks/>
        Public Event FSPCallMerchantCompleted As FSPCallMerchantCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobFSPDownloadCompleted As GetJobFSPDownloadCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPostcodeFSPAllocationCompleted As GetPostcodeFSPAllocationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMerchantAcceptanceCompleted As GetMerchantAcceptanceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPPartTranCompleted As GetFSPPartTranCompletedEventHandler
        
        '''<remarks/>
        Public Event FSPSavePartTranReceivedCompleted As FSPSavePartTranReceivedCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFSPPartInventoryCompleted As GetFSPPartInventoryCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FSPSavePartInventory", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FSPSavePartInventory(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("FSPSavePartInventory", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FSPSavePartInventoryAsync(ByVal myParam() As Object)
            Me.FSPSavePartInventoryAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FSPSavePartInventoryAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.FSPSavePartInventoryOperationCompleted Is Nothing) Then
                Me.FSPSavePartInventoryOperationCompleted = AddressOf Me.OnFSPSavePartInventoryOperationCompleted
            End If
            Me.InvokeAsync("FSPSavePartInventory", New Object() {myParam}, Me.FSPSavePartInventoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnFSPSavePartInventoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.FSPSavePartInventoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FSPSavePartInventoryCompleted(Me, New FSPSavePartInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPDelegationList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPDelegationList(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPDelegationList", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPDelegationListAsync(ByVal myParam() As Object)
            Me.GetFSPDelegationListAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPDelegationListAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPDelegationListOperationCompleted Is Nothing) Then
                Me.GetFSPDelegationListOperationCompleted = AddressOf Me.OnGetFSPDelegationListOperationCompleted
            End If
            Me.InvokeAsync("GetFSPDelegationList", New Object() {myParam}, Me.GetFSPDelegationListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPDelegationListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPDelegationListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPDelegationListCompleted(Me, New GetFSPDelegationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPDelegation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPDelegation(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPDelegation", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPDelegationAsync(ByVal myParam() As Object)
            Me.GetFSPDelegationAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPDelegationAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPDelegationOperationCompleted Is Nothing) Then
                Me.GetFSPDelegationOperationCompleted = AddressOf Me.OnGetFSPDelegationOperationCompleted
            End If
            Me.InvokeAsync("GetFSPDelegation", New Object() {myParam}, Me.GetFSPDelegationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPDelegationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPDelegationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPDelegationCompleted(Me, New GetFSPDelegationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPDelegationReason", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPDelegationReason(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPDelegationReason", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPDelegationReasonAsync(ByVal myParam() As Object)
            Me.GetFSPDelegationReasonAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPDelegationReasonAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPDelegationReasonOperationCompleted Is Nothing) Then
                Me.GetFSPDelegationReasonOperationCompleted = AddressOf Me.OnGetFSPDelegationReasonOperationCompleted
            End If
            Me.InvokeAsync("GetFSPDelegationReason", New Object() {myParam}, Me.GetFSPDelegationReasonOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPDelegationReasonOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPDelegationReasonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPDelegationReasonCompleted(Me, New GetFSPDelegationReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutFSPDelegation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutFSPDelegation(ByVal myParam() As Object, ByRef pLogID As Integer) As Object
            Dim results() As Object = Me.Invoke("PutFSPDelegation", New Object() {myParam, pLogID})
            pLogID = CType(results(1),Integer)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutFSPDelegationAsync(ByVal myParam() As Object, ByVal pLogID As Integer)
            Me.PutFSPDelegationAsync(myParam, pLogID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutFSPDelegationAsync(ByVal myParam() As Object, ByVal pLogID As Integer, ByVal userState As Object)
            If (Me.PutFSPDelegationOperationCompleted Is Nothing) Then
                Me.PutFSPDelegationOperationCompleted = AddressOf Me.OnPutFSPDelegationOperationCompleted
            End If
            Me.InvokeAsync("PutFSPDelegation", New Object() {myParam, pLogID}, Me.PutFSPDelegationOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutFSPDelegationOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutFSPDelegationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutFSPDelegationCompleted(Me, New PutFSPDelegationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelFSPDelegation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelFSPDelegation(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("CancelFSPDelegation", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelFSPDelegationAsync(ByVal myParam() As Object)
            Me.CancelFSPDelegationAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelFSPDelegationAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.CancelFSPDelegationOperationCompleted Is Nothing) Then
                Me.CancelFSPDelegationOperationCompleted = AddressOf Me.OnCancelFSPDelegationOperationCompleted
            End If
            Me.InvokeAsync("CancelFSPDelegation", New Object() {myParam}, Me.CancelFSPDelegationOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelFSPDelegationOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelFSPDelegationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelFSPDelegationCompleted(Me, New CancelFSPDelegationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPCalendar", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPCalendar(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPCalendar", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPCalendarAsync(ByVal myParam() As Object)
            Me.GetFSPCalendarAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPCalendarAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPCalendarOperationCompleted Is Nothing) Then
                Me.GetFSPCalendarOperationCompleted = AddressOf Me.OnGetFSPCalendarOperationCompleted
            End If
            Me.InvokeAsync("GetFSPCalendar", New Object() {myParam}, Me.GetFSPCalendarOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPCalendarOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPCalendarCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPCalendarCompleted(Me, New GetFSPCalendarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBulletin", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBulletin(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBulletin", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBulletinAsync(ByVal myParam() As Object)
            Me.GetBulletinAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBulletinAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetBulletinOperationCompleted Is Nothing) Then
                Me.GetBulletinOperationCompleted = AddressOf Me.OnGetBulletinOperationCompleted
            End If
            Me.InvokeAsync("GetBulletin", New Object() {myParam}, Me.GetBulletinOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBulletinOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBulletinCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBulletinCompleted(Me, New GetBulletinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutBulletin", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutBulletin(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("PutBulletin", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutBulletinAsync(ByVal myParam() As Object)
            Me.PutBulletinAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutBulletinAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.PutBulletinOperationCompleted Is Nothing) Then
                Me.PutBulletinOperationCompleted = AddressOf Me.OnPutBulletinOperationCompleted
            End If
            Me.InvokeAsync("PutBulletin", New Object() {myParam}, Me.PutBulletinOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutBulletinOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutBulletinCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutBulletinCompleted(Me, New PutBulletinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBulletinViewLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBulletinViewLog(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBulletinViewLog", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBulletinViewLogAsync(ByVal myParam() As Object)
            Me.GetBulletinViewLogAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBulletinViewLogAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetBulletinViewLogOperationCompleted Is Nothing) Then
                Me.GetBulletinViewLogOperationCompleted = AddressOf Me.OnGetBulletinViewLogOperationCompleted
            End If
            Me.InvokeAsync("GetBulletinViewLog", New Object() {myParam}, Me.GetBulletinViewLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBulletinViewLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBulletinViewLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBulletinViewLogCompleted(Me, New GetBulletinViewLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutBulletinViewLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutBulletinViewLog(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("PutBulletinViewLog", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutBulletinViewLogAsync(ByVal myParam() As Object)
            Me.PutBulletinViewLogAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutBulletinViewLogAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.PutBulletinViewLogOperationCompleted Is Nothing) Then
                Me.PutBulletinViewLogOperationCompleted = AddressOf Me.OnPutBulletinViewLogOperationCompleted
            End If
            Me.InvokeAsync("PutBulletinViewLog", New Object() {myParam}, Me.PutBulletinViewLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutBulletinViewLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutBulletinViewLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutBulletinViewLogCompleted(Me, New PutBulletinViewLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSurvey", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSurvey(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSurvey", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSurveyAsync(ByVal myParam() As Object)
            Me.GetSurveyAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSurveyAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetSurveyOperationCompleted Is Nothing) Then
                Me.GetSurveyOperationCompleted = AddressOf Me.OnGetSurveyOperationCompleted
            End If
            Me.InvokeAsync("GetSurvey", New Object() {myParam}, Me.GetSurveyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSurveyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSurveyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSurveyCompleted(Me, New GetSurveyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSurveyAnswer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSurveyAnswer(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSurveyAnswer", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSurveyAnswerAsync(ByVal myParam() As Object)
            Me.GetSurveyAnswerAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSurveyAnswerAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetSurveyAnswerOperationCompleted Is Nothing) Then
                Me.GetSurveyAnswerOperationCompleted = AddressOf Me.OnGetSurveyAnswerOperationCompleted
            End If
            Me.InvokeAsync("GetSurveyAnswer", New Object() {myParam}, Me.GetSurveyAnswerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSurveyAnswerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSurveyAnswerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSurveyAnswerCompleted(Me, New GetSurveyAnswerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutSurveyAnswer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutSurveyAnswer(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("PutSurveyAnswer", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutSurveyAnswerAsync(ByVal myParam() As Object)
            Me.PutSurveyAnswerAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutSurveyAnswerAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.PutSurveyAnswerOperationCompleted Is Nothing) Then
                Me.PutSurveyAnswerOperationCompleted = AddressOf Me.OnPutSurveyAnswerOperationCompleted
            End If
            Me.InvokeAsync("PutSurveyAnswer", New Object() {myParam}, Me.PutSurveyAnswerOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutSurveyAnswerOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutSurveyAnswerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutSurveyAnswerCompleted(Me, New PutSurveyAnswerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutMerchantAcceptance", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutMerchantAcceptance(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("PutMerchantAcceptance", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutMerchantAcceptanceAsync(ByVal myParam() As Object)
            Me.PutMerchantAcceptanceAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutMerchantAcceptanceAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.PutMerchantAcceptanceOperationCompleted Is Nothing) Then
                Me.PutMerchantAcceptanceOperationCompleted = AddressOf Me.OnPutMerchantAcceptanceOperationCompleted
            End If
            Me.InvokeAsync("PutMerchantAcceptance", New Object() {myParam}, Me.PutMerchantAcceptanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutMerchantAcceptanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutMerchantAcceptanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutMerchantAcceptanceCompleted(Me, New PutMerchantAcceptanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadMerchantSignedJobSheet", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadMerchantSignedJobSheet(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("UploadMerchantSignedJobSheet", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadMerchantSignedJobSheetAsync(ByVal myParam() As Object)
            Me.UploadMerchantSignedJobSheetAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadMerchantSignedJobSheetAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.UploadMerchantSignedJobSheetOperationCompleted Is Nothing) Then
                Me.UploadMerchantSignedJobSheetOperationCompleted = AddressOf Me.OnUploadMerchantSignedJobSheetOperationCompleted
            End If
            Me.InvokeAsync("UploadMerchantSignedJobSheet", New Object() {myParam}, Me.UploadMerchantSignedJobSheetOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadMerchantSignedJobSheetOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadMerchantSignedJobSheetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadMerchantSignedJobSheetCompleted(Me, New UploadMerchantSignedJobSheetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateJobClosure", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateJobClosure(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("ValidateJobClosure", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateJobClosureAsync(ByVal myParam() As Object)
            Me.ValidateJobClosureAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateJobClosureAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.ValidateJobClosureOperationCompleted Is Nothing) Then
                Me.ValidateJobClosureOperationCompleted = AddressOf Me.OnValidateJobClosureOperationCompleted
            End If
            Me.InvokeAsync("ValidateJobClosure", New Object() {myParam}, Me.ValidateJobClosureOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateJobClosureOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateJobClosureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateJobClosureCompleted(Me, New ValidateJobClosureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutErrorLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutErrorLog(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("PutErrorLog", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutErrorLogAsync(ByVal myParam() As Object)
            Me.PutErrorLogAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutErrorLogAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.PutErrorLogOperationCompleted Is Nothing) Then
                Me.PutErrorLogOperationCompleted = AddressOf Me.OnPutErrorLogOperationCompleted
            End If
            Me.InvokeAsync("PutErrorLog", New Object() {myParam}, Me.PutErrorLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutErrorLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutErrorLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutErrorLogCompleted(Me, New PutErrorLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutActionLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutActionLog(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("PutActionLog", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutActionLogAsync(ByVal myParam() As Object)
            Me.PutActionLogAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutActionLogAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.PutActionLogOperationCompleted Is Nothing) Then
                Me.PutActionLogOperationCompleted = AddressOf Me.OnPutActionLogOperationCompleted
            End If
            Me.InvokeAsync("PutActionLog", New Object() {myParam}, Me.PutActionLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutActionLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutActionLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutActionLogCompleted(Me, New PutActionLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutSessionLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutSessionLog(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("PutSessionLog", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutSessionLogAsync(ByVal myParam() As Object)
            Me.PutSessionLogAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutSessionLogAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.PutSessionLogOperationCompleted Is Nothing) Then
                Me.PutSessionLogOperationCompleted = AddressOf Me.OnPutSessionLogOperationCompleted
            End If
            Me.InvokeAsync("PutSessionLog", New Object() {myParam}, Me.PutSessionLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutSessionLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutSessionLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutSessionLogCompleted(Me, New PutSessionLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSessionLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSessionLog(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSessionLog", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSessionLogAsync(ByVal myParam() As Object)
            Me.GetSessionLogAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSessionLogAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetSessionLogOperationCompleted Is Nothing) Then
                Me.GetSessionLogOperationCompleted = AddressOf Me.OnGetSessionLogOperationCompleted
            End If
            Me.InvokeAsync("GetSessionLog", New Object() {myParam}, Me.GetSessionLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSessionLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSessionLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSessionLogCompleted(Me, New GetSessionLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAppAttribute", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAppAttribute(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("GetAppAttribute", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAppAttributeAsync(ByVal myParam() As Object)
            Me.GetAppAttributeAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAppAttributeAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetAppAttributeOperationCompleted Is Nothing) Then
                Me.GetAppAttributeOperationCompleted = AddressOf Me.OnGetAppAttributeOperationCompleted
            End If
            Me.InvokeAsync("GetAppAttribute", New Object() {myParam}, Me.GetAppAttributeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAppAttributeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAppAttributeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAppAttributeCompleted(Me, New GetAppAttributeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogApplicationAndAssignMID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LogApplicationAndAssignMID(ByVal myParam() As Object, ByRef pMerchantID As String, ByRef pPayMarkID As Long) As Object
            Dim results() As Object = Me.Invoke("LogApplicationAndAssignMID", New Object() {myParam, pMerchantID, pPayMarkID})
            pMerchantID = CType(results(1),String)
            pPayMarkID = CType(results(2),Long)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LogApplicationAndAssignMIDAsync(ByVal myParam() As Object, ByVal pMerchantID As String, ByVal pPayMarkID As Long)
            Me.LogApplicationAndAssignMIDAsync(myParam, pMerchantID, pPayMarkID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogApplicationAndAssignMIDAsync(ByVal myParam() As Object, ByVal pMerchantID As String, ByVal pPayMarkID As Long, ByVal userState As Object)
            If (Me.LogApplicationAndAssignMIDOperationCompleted Is Nothing) Then
                Me.LogApplicationAndAssignMIDOperationCompleted = AddressOf Me.OnLogApplicationAndAssignMIDOperationCompleted
            End If
            Me.InvokeAsync("LogApplicationAndAssignMID", New Object() {myParam, pMerchantID, pPayMarkID}, Me.LogApplicationAndAssignMIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogApplicationAndAssignMIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogApplicationAndAssignMIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogApplicationAndAssignMIDCompleted(Me, New LogApplicationAndAssignMIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetJobCount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobCount(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobCount", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobCountAsync(ByVal myParam() As Object)
            Me.GetJobCountAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobCountAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetJobCountOperationCompleted Is Nothing) Then
                Me.GetJobCountOperationCompleted = AddressOf Me.OnGetJobCountOperationCompleted
            End If
            Me.InvokeAsync("GetJobCount", New Object() {myParam}, Me.GetJobCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobCountCompleted(Me, New GetJobCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJob(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJob", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobAsync(ByVal myParam() As Object)
            Me.GetJobAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetJobOperationCompleted Is Nothing) Then
                Me.GetJobOperationCompleted = AddressOf Me.OnGetJobOperationCompleted
            End If
            Me.InvokeAsync("GetJob", New Object() {myParam}, Me.GetJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobCompleted(Me, New GetJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetJobs", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobs(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobs", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobsAsync(ByVal myParam() As Object)
            Me.GetJobsAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobsAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetJobsOperationCompleted Is Nothing) Then
                Me.GetJobsOperationCompleted = AddressOf Me.OnGetJobsOperationCompleted
            End If
            Me.InvokeAsync("GetJobs", New Object() {myParam}, Me.GetJobsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobsCompleted(Me, New GetJobsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CloseDeinstallJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CloseDeinstallJob(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("CloseDeinstallJob", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CloseDeinstallJobAsync(ByVal myParam() As Object)
            Me.CloseDeinstallJobAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CloseDeinstallJobAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.CloseDeinstallJobOperationCompleted Is Nothing) Then
                Me.CloseDeinstallJobOperationCompleted = AddressOf Me.OnCloseDeinstallJobOperationCompleted
            End If
            Me.InvokeAsync("CloseDeinstallJob", New Object() {myParam}, Me.CloseDeinstallJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnCloseDeinstallJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.CloseDeinstallJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CloseDeinstallJobCompleted(Me, New CloseDeinstallJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClientClosureReasons", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientClosureReasons(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetClientClosureReasons", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClientClosureReasonsAsync(ByVal myParam() As Object)
            Me.GetClientClosureReasonsAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClientClosureReasonsAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetClientClosureReasonsOperationCompleted Is Nothing) Then
                Me.GetClientClosureReasonsOperationCompleted = AddressOf Me.OnGetClientClosureReasonsOperationCompleted
            End If
            Me.InvokeAsync("GetClientClosureReasons", New Object() {myParam}, Me.GetClientClosureReasonsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClientClosureReasonsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClientClosureReasonsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClientClosureReasonsCompleted(Me, New GetClientClosureReasonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClientTerminalConfigField", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientTerminalConfigField(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetClientTerminalConfigField", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClientTerminalConfigFieldAsync(ByVal myParam() As Object)
            Me.GetClientTerminalConfigFieldAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClientTerminalConfigFieldAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetClientTerminalConfigFieldOperationCompleted Is Nothing) Then
                Me.GetClientTerminalConfigFieldOperationCompleted = AddressOf Me.OnGetClientTerminalConfigFieldOperationCompleted
            End If
            Me.InvokeAsync("GetClientTerminalConfigField", New Object() {myParam}, Me.GetClientTerminalConfigFieldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClientTerminalConfigFieldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClientTerminalConfigFieldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClientTerminalConfigFieldCompleted(Me, New GetClientTerminalConfigFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetState", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetState(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetState", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStateAsync(ByVal myParam() As Object)
            Me.GetStateAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStateAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetStateOperationCompleted Is Nothing) Then
                Me.GetStateOperationCompleted = AddressOf Me.OnGetStateOperationCompleted
            End If
            Me.InvokeAsync("GetState", New Object() {myParam}, Me.GetStateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStateCompleted(Me, New GetStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetJobFilterStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobFilterStatus(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobFilterStatus", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobFilterStatusAsync(ByVal myParam() As Object)
            Me.GetJobFilterStatusAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobFilterStatusAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetJobFilterStatusOperationCompleted Is Nothing) Then
                Me.GetJobFilterStatusOperationCompleted = AddressOf Me.OnGetJobFilterStatusOperationCompleted
            End If
            Me.InvokeAsync("GetJobFilterStatus", New Object() {myParam}, Me.GetJobFilterStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobFilterStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobFilterStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobFilterStatusCompleted(Me, New GetJobFilterStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetJobDeviceType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobDeviceType(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobDeviceType", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobDeviceTypeAsync(ByVal myParam() As Object)
            Me.GetJobDeviceTypeAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobDeviceTypeAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetJobDeviceTypeOperationCompleted Is Nothing) Then
                Me.GetJobDeviceTypeOperationCompleted = AddressOf Me.OnGetJobDeviceTypeOperationCompleted
            End If
            Me.InvokeAsync("GetJobDeviceType", New Object() {myParam}, Me.GetJobDeviceTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobDeviceTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobDeviceTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobDeviceTypeCompleted(Me, New GetJobDeviceTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetJobMethod", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobMethod(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobMethod", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobMethodAsync(ByVal myParam() As Object)
            Me.GetJobMethodAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobMethodAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetJobMethodOperationCompleted Is Nothing) Then
                Me.GetJobMethodOperationCompleted = AddressOf Me.OnGetJobMethodOperationCompleted
            End If
            Me.InvokeAsync("GetJobMethod", New Object() {myParam}, Me.GetJobMethodOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobMethodOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobMethodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobMethodCompleted(Me, New GetJobMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCallType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCallType(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCallType", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCallTypeAsync(ByVal myParam() As Object)
            Me.GetCallTypeAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCallTypeAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetCallTypeOperationCompleted Is Nothing) Then
                Me.GetCallTypeOperationCompleted = AddressOf Me.OnGetCallTypeOperationCompleted
            End If
            Me.InvokeAsync("GetCallType", New Object() {myParam}, Me.GetCallTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCallTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCallTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCallTypeCompleted(Me, New GetCallTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCallTypeSymptom", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCallTypeSymptom(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCallTypeSymptom", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCallTypeSymptomAsync(ByVal myParam() As Object)
            Me.GetCallTypeSymptomAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCallTypeSymptomAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetCallTypeSymptomOperationCompleted Is Nothing) Then
                Me.GetCallTypeSymptomOperationCompleted = AddressOf Me.OnGetCallTypeSymptomOperationCompleted
            End If
            Me.InvokeAsync("GetCallTypeSymptom", New Object() {myParam}, Me.GetCallTypeSymptomOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCallTypeSymptomOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCallTypeSymptomCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCallTypeSymptomCompleted(Me, New GetCallTypeSymptomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSymptomFault", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSymptomFault(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSymptomFault", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSymptomFaultAsync(ByVal myParam() As Object)
            Me.GetSymptomFaultAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSymptomFaultAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetSymptomFaultOperationCompleted Is Nothing) Then
                Me.GetSymptomFaultOperationCompleted = AddressOf Me.OnGetSymptomFaultOperationCompleted
            End If
            Me.InvokeAsync("GetSymptomFault", New Object() {myParam}, Me.GetSymptomFaultOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSymptomFaultOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSymptomFaultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSymptomFaultCompleted(Me, New GetSymptomFaultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAdditionalServiceType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAdditionalServiceType(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAdditionalServiceType", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAdditionalServiceTypeAsync(ByVal myParam() As Object)
            Me.GetAdditionalServiceTypeAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAdditionalServiceTypeAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetAdditionalServiceTypeOperationCompleted Is Nothing) Then
                Me.GetAdditionalServiceTypeOperationCompleted = AddressOf Me.OnGetAdditionalServiceTypeOperationCompleted
            End If
            Me.InvokeAsync("GetAdditionalServiceType", New Object() {myParam}, Me.GetAdditionalServiceTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAdditionalServiceTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAdditionalServiceTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAdditionalServiceTypeCompleted(Me, New GetAdditionalServiceTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateTIDBeforeLogJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateTIDBeforeLogJob(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("ValidateTIDBeforeLogJob", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateTIDBeforeLogJobAsync(ByVal myParam() As Object)
            Me.ValidateTIDBeforeLogJobAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateTIDBeforeLogJobAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.ValidateTIDBeforeLogJobOperationCompleted Is Nothing) Then
                Me.ValidateTIDBeforeLogJobOperationCompleted = AddressOf Me.OnValidateTIDBeforeLogJobOperationCompleted
            End If
            Me.InvokeAsync("ValidateTIDBeforeLogJob", New Object() {myParam}, Me.ValidateTIDBeforeLogJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateTIDBeforeLogJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateTIDBeforeLogJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateTIDBeforeLogJobCompleted(Me, New ValidateTIDBeforeLogJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LogJob(ByVal myParam() As Object, ByRef pJobID As Integer) As Object
            Dim results() As Object = Me.Invoke("LogJob", New Object() {myParam, pJobID})
            pJobID = CType(results(1),Integer)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LogJobAsync(ByVal myParam() As Object, ByVal pJobID As Integer)
            Me.LogJobAsync(myParam, pJobID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogJobAsync(ByVal myParam() As Object, ByVal pJobID As Integer, ByVal userState As Object)
            If (Me.LogJobOperationCompleted Is Nothing) Then
                Me.LogJobOperationCompleted = AddressOf Me.OnLogJobOperationCompleted
            End If
            Me.InvokeAsync("LogJob", New Object() {myParam, pJobID}, Me.LogJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogJobCompleted(Me, New LogJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogCall", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LogCall(ByVal myParam() As Object, ByRef pCallNumber As String) As Object
            Dim results() As Object = Me.Invoke("LogCall", New Object() {myParam, pCallNumber})
            pCallNumber = CType(results(1),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LogCallAsync(ByVal myParam() As Object, ByVal pCallNumber As String)
            Me.LogCallAsync(myParam, pCallNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogCallAsync(ByVal myParam() As Object, ByVal pCallNumber As String, ByVal userState As Object)
            If (Me.LogCallOperationCompleted Is Nothing) Then
                Me.LogCallOperationCompleted = AddressOf Me.OnLogCallOperationCompleted
            End If
            Me.InvokeAsync("LogCall", New Object() {myParam, pCallNumber}, Me.LogCallOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogCallOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogCallCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogCallCompleted(Me, New LogCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDeviceComponent", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDeviceComponent(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDeviceComponent", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDeviceComponentAsync(ByVal myParam() As Object)
            Me.GetDeviceComponentAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDeviceComponentAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetDeviceComponentOperationCompleted Is Nothing) Then
                Me.GetDeviceComponentOperationCompleted = AddressOf Me.OnGetDeviceComponentOperationCompleted
            End If
            Me.InvokeAsync("GetDeviceComponent", New Object() {myParam}, Me.GetDeviceComponentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDeviceComponentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDeviceComponentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDeviceComponentCompleted(Me, New GetDeviceComponentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DuplicateJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DuplicateJob(ByVal myParam() As Object, ByRef pJobID As Integer) As Object
            Dim results() As Object = Me.Invoke("DuplicateJob", New Object() {myParam, pJobID})
            pJobID = CType(results(1),Integer)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DuplicateJobAsync(ByVal myParam() As Object, ByVal pJobID As Integer)
            Me.DuplicateJobAsync(myParam, pJobID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DuplicateJobAsync(ByVal myParam() As Object, ByVal pJobID As Integer, ByVal userState As Object)
            If (Me.DuplicateJobOperationCompleted Is Nothing) Then
                Me.DuplicateJobOperationCompleted = AddressOf Me.OnDuplicateJobOperationCompleted
            End If
            Me.InvokeAsync("DuplicateJob", New Object() {myParam, pJobID}, Me.DuplicateJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnDuplicateJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.DuplicateJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DuplicateJobCompleted(Me, New DuplicateJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCall", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCall(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCall", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCallAsync(ByVal myParam() As Object)
            Me.GetCallAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCallAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetCallOperationCompleted Is Nothing) Then
                Me.GetCallOperationCompleted = AddressOf Me.OnGetCallOperationCompleted
            End If
            Me.InvokeAsync("GetCall", New Object() {myParam}, Me.GetCallOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCallOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCallCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCallCompleted(Me, New GetCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCalls", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCalls(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCalls", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCallsAsync(ByVal myParam() As Object)
            Me.GetCallsAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCallsAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetCallsOperationCompleted Is Nothing) Then
                Me.GetCallsOperationCompleted = AddressOf Me.OnGetCallsOperationCompleted
            End If
            Me.InvokeAsync("GetCalls", New Object() {myParam}, Me.GetCallsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCallsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCallsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCallsCompleted(Me, New GetCallsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSite", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSite(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSite", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSiteAsync(ByVal myParam() As Object)
            Me.GetSiteAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSiteAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetSiteOperationCompleted Is Nothing) Then
                Me.GetSiteOperationCompleted = AddressOf Me.OnGetSiteOperationCompleted
            End If
            Me.InvokeAsync("GetSite", New Object() {myParam}, Me.GetSiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSiteCompleted(Me, New GetSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSites", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSites(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSites", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSitesAsync(ByVal myParam() As Object)
            Me.GetSitesAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSitesAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetSitesOperationCompleted Is Nothing) Then
                Me.GetSitesOperationCompleted = AddressOf Me.OnGetSitesOperationCompleted
            End If
            Me.InvokeAsync("GetSites", New Object() {myParam}, Me.GetSitesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSitesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSitesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSitesCompleted(Me, New GetSitesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSiteEquipments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSiteEquipments(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSiteEquipments", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSiteEquipmentsAsync(ByVal myParam() As Object)
            Me.GetSiteEquipmentsAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSiteEquipmentsAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetSiteEquipmentsOperationCompleted Is Nothing) Then
                Me.GetSiteEquipmentsOperationCompleted = AddressOf Me.OnGetSiteEquipmentsOperationCompleted
            End If
            Me.InvokeAsync("GetSiteEquipments", New Object() {myParam}, Me.GetSiteEquipmentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSiteEquipmentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSiteEquipmentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSiteEquipmentsCompleted(Me, New GetSiteEquipmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutSite", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutSite(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("PutSite", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutSiteAsync(ByVal myParam() As Object)
            Me.PutSiteAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutSiteAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.PutSiteOperationCompleted Is Nothing) Then
                Me.PutSiteOperationCompleted = AddressOf Me.OnPutSiteOperationCompleted
            End If
            Me.InvokeAsync("PutSite", New Object() {myParam}, Me.PutSiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutSiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutSiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutSiteCompleted(Me, New PutSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQuickFindList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetQuickFindList(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetQuickFindList", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetQuickFindListAsync(ByVal myParam() As Object)
            Me.GetQuickFindListAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQuickFindListAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetQuickFindListOperationCompleted Is Nothing) Then
                Me.GetQuickFindListOperationCompleted = AddressOf Me.OnGetQuickFindListOperationCompleted
            End If
            Me.InvokeAsync("GetQuickFindList", New Object() {myParam}, Me.GetQuickFindListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQuickFindListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQuickFindListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQuickFindListCompleted(Me, New GetQuickFindListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTerminalJobList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTerminalJobList(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTerminalJobList", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTerminalJobListAsync(ByVal myParam() As Object)
            Me.GetTerminalJobListAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTerminalJobListAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetTerminalJobListOperationCompleted Is Nothing) Then
                Me.GetTerminalJobListOperationCompleted = AddressOf Me.OnGetTerminalJobListOperationCompleted
            End If
            Me.InvokeAsync("GetTerminalJobList", New Object() {myParam}, Me.GetTerminalJobListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTerminalJobListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTerminalJobListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTerminalJobListCompleted(Me, New GetTerminalJobListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDeviceListBySerial", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDeviceListBySerial(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDeviceListBySerial", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDeviceListBySerialAsync(ByVal myParam() As Object)
            Me.GetDeviceListBySerialAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDeviceListBySerialAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetDeviceListBySerialOperationCompleted Is Nothing) Then
                Me.GetDeviceListBySerialOperationCompleted = AddressOf Me.OnGetDeviceListBySerialOperationCompleted
            End If
            Me.InvokeAsync("GetDeviceListBySerial", New Object() {myParam}, Me.GetDeviceListBySerialOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDeviceListBySerialOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDeviceListBySerialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDeviceListBySerialCompleted(Me, New GetDeviceListBySerialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDeviceBySerial", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDeviceBySerial(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDeviceBySerial", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDeviceBySerialAsync(ByVal myParam() As Object)
            Me.GetDeviceBySerialAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDeviceBySerialAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetDeviceBySerialOperationCompleted Is Nothing) Then
                Me.GetDeviceBySerialOperationCompleted = AddressOf Me.OnGetDeviceBySerialOperationCompleted
            End If
            Me.InvokeAsync("GetDeviceBySerial", New Object() {myParam}, Me.GetDeviceBySerialOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDeviceBySerialOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDeviceBySerialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDeviceBySerialCompleted(Me, New GetDeviceBySerialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClientUpdateInfoFieldList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientUpdateInfoFieldList(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetClientUpdateInfoFieldList", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClientUpdateInfoFieldListAsync(ByVal myParam() As Object)
            Me.GetClientUpdateInfoFieldListAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClientUpdateInfoFieldListAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetClientUpdateInfoFieldListOperationCompleted Is Nothing) Then
                Me.GetClientUpdateInfoFieldListOperationCompleted = AddressOf Me.OnGetClientUpdateInfoFieldListOperationCompleted
            End If
            Me.InvokeAsync("GetClientUpdateInfoFieldList", New Object() {myParam}, Me.GetClientUpdateInfoFieldListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClientUpdateInfoFieldListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClientUpdateInfoFieldListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClientUpdateInfoFieldListCompleted(Me, New GetClientUpdateInfoFieldListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateJobInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateJobInfo(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("UpdateJobInfo", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateJobInfoAsync(ByVal myParam() As Object)
            Me.UpdateJobInfoAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateJobInfoAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.UpdateJobInfoOperationCompleted Is Nothing) Then
                Me.UpdateJobInfoOperationCompleted = AddressOf Me.OnUpdateJobInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateJobInfo", New Object() {myParam}, Me.UpdateJobInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateJobInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateJobInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateJobInfoCompleted(Me, New UpdateJobInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClientProjects", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientProjects(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetClientProjects", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClientProjectsAsync(ByVal myParam() As Object)
            Me.GetClientProjectsAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClientProjectsAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetClientProjectsOperationCompleted Is Nothing) Then
                Me.GetClientProjectsOperationCompleted = AddressOf Me.OnGetClientProjectsOperationCompleted
            End If
            Me.InvokeAsync("GetClientProjects", New Object() {myParam}, Me.GetClientProjectsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClientProjectsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClientProjectsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClientProjectsCompleted(Me, New GetClientProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomers(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCustomers", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomersAsync(ByVal myParam() As Object)
            Me.GetCustomersAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomersAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetCustomersOperationCompleted Is Nothing) Then
                Me.GetCustomersOperationCompleted = AddressOf Me.OnGetCustomersOperationCompleted
            End If
            Me.InvokeAsync("GetCustomers", New Object() {myParam}, Me.GetCustomersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomersCompleted(Me, New GetCustomersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPJob(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPJob", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobAsync(ByVal myParam() As Object)
            Me.GetFSPJobAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPJobOperationCompleted Is Nothing) Then
                Me.GetFSPJobOperationCompleted = AddressOf Me.OnGetFSPJobOperationCompleted
            End If
            Me.InvokeAsync("GetFSPJob", New Object() {myParam}, Me.GetFSPJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPJobCompleted(Me, New GetFSPJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPJobs", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPJobs(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPJobs", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobsAsync(ByVal myParam() As Object)
            Me.GetFSPJobsAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobsAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPJobsOperationCompleted Is Nothing) Then
                Me.GetFSPJobsOperationCompleted = AddressOf Me.OnGetFSPJobsOperationCompleted
            End If
            Me.InvokeAsync("GetFSPJobs", New Object() {myParam}, Me.GetFSPJobsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPJobsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPJobsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPJobsCompleted(Me, New GetFSPJobsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPCall", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPCall(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPCall", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPCallAsync(ByVal myParam() As Object)
            Me.GetFSPCallAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPCallAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPCallOperationCompleted Is Nothing) Then
                Me.GetFSPCallOperationCompleted = AddressOf Me.OnGetFSPCallOperationCompleted
            End If
            Me.InvokeAsync("GetFSPCall", New Object() {myParam}, Me.GetFSPCallOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPCallOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPCallCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPCallCompleted(Me, New GetFSPCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPCalls", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPCalls(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPCalls", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPCallsAsync(ByVal myParam() As Object)
            Me.GetFSPCallsAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPCallsAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPCallsOperationCompleted Is Nothing) Then
                Me.GetFSPCallsOperationCompleted = AddressOf Me.OnGetFSPCallsOperationCompleted
            End If
            Me.InvokeAsync("GetFSPCalls", New Object() {myParam}, Me.GetFSPCallsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPCallsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPCallsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPCallsCompleted(Me, New GetFSPCallsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GMapGetFSPJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GMapGetFSPJob(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GMapGetFSPJob", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GMapGetFSPJobAsync(ByVal myParam() As Object)
            Me.GMapGetFSPJobAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GMapGetFSPJobAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GMapGetFSPJobOperationCompleted Is Nothing) Then
                Me.GMapGetFSPJobOperationCompleted = AddressOf Me.OnGMapGetFSPJobOperationCompleted
            End If
            Me.InvokeAsync("GMapGetFSPJob", New Object() {myParam}, Me.GMapGetFSPJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnGMapGetFSPJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.GMapGetFSPJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GMapGetFSPJobCompleted(Me, New GMapGetFSPJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPClosedJobs", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPClosedJobs(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPClosedJobs", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPClosedJobsAsync(ByVal myParam() As Object)
            Me.GetFSPClosedJobsAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPClosedJobsAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPClosedJobsOperationCompleted Is Nothing) Then
                Me.GetFSPClosedJobsOperationCompleted = AddressOf Me.OnGetFSPClosedJobsOperationCompleted
            End If
            Me.InvokeAsync("GetFSPClosedJobs", New Object() {myParam}, Me.GetFSPClosedJobsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPClosedJobsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPClosedJobsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPClosedJobsCompleted(Me, New GetFSPClosedJobsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPClosedJobWithOutstandingDevice", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPClosedJobWithOutstandingDevice(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPClosedJobWithOutstandingDevice", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPClosedJobWithOutstandingDeviceAsync(ByVal myParam() As Object)
            Me.GetFSPClosedJobWithOutstandingDeviceAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPClosedJobWithOutstandingDeviceAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPClosedJobWithOutstandingDeviceOperationCompleted Is Nothing) Then
                Me.GetFSPClosedJobWithOutstandingDeviceOperationCompleted = AddressOf Me.OnGetFSPClosedJobWithOutstandingDeviceOperationCompleted
            End If
            Me.InvokeAsync("GetFSPClosedJobWithOutstandingDevice", New Object() {myParam}, Me.GetFSPClosedJobWithOutstandingDeviceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPClosedJobWithOutstandingDeviceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPClosedJobWithOutstandingDeviceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPClosedJobWithOutstandingDeviceCompleted(Me, New GetFSPClosedJobWithOutstandingDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPJobEquipmentHistory", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPJobEquipmentHistory(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPJobEquipmentHistory", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobEquipmentHistoryAsync(ByVal myParam() As Object)
            Me.GetFSPJobEquipmentHistoryAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobEquipmentHistoryAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPJobEquipmentHistoryOperationCompleted Is Nothing) Then
                Me.GetFSPJobEquipmentHistoryOperationCompleted = AddressOf Me.OnGetFSPJobEquipmentHistoryOperationCompleted
            End If
            Me.InvokeAsync("GetFSPJobEquipmentHistory", New Object() {myParam}, Me.GetFSPJobEquipmentHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPJobEquipmentHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPJobEquipmentHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPJobEquipmentHistoryCompleted(Me, New GetFSPJobEquipmentHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPAllOpenJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPAllOpenJob(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPAllOpenJob", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPAllOpenJobAsync(ByVal myParam() As Object)
            Me.GetFSPAllOpenJobAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPAllOpenJobAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPAllOpenJobOperationCompleted Is Nothing) Then
                Me.GetFSPAllOpenJobOperationCompleted = AddressOf Me.OnGetFSPAllOpenJobOperationCompleted
            End If
            Me.InvokeAsync("GetFSPAllOpenJob", New Object() {myParam}, Me.GetFSPAllOpenJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPAllOpenJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPAllOpenJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPAllOpenJobCompleted(Me, New GetFSPAllOpenJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPJobsForBooking", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPJobsForBooking(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPJobsForBooking", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobsForBookingAsync(ByVal myParam() As Object)
            Me.GetFSPJobsForBookingAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobsForBookingAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPJobsForBookingOperationCompleted Is Nothing) Then
                Me.GetFSPJobsForBookingOperationCompleted = AddressOf Me.OnGetFSPJobsForBookingOperationCompleted
            End If
            Me.InvokeAsync("GetFSPJobsForBooking", New Object() {myParam}, Me.GetFSPJobsForBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPJobsForBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPJobsForBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPJobsForBookingCompleted(Me, New GetFSPJobsForBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FSPBookJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FSPBookJob(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("FSPBookJob", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FSPBookJobAsync(ByVal myParam() As Object)
            Me.FSPBookJobAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FSPBookJobAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.FSPBookJobOperationCompleted Is Nothing) Then
                Me.FSPBookJobOperationCompleted = AddressOf Me.OnFSPBookJobOperationCompleted
            End If
            Me.InvokeAsync("FSPBookJob", New Object() {myParam}, Me.FSPBookJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnFSPBookJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.FSPBookJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FSPBookJobCompleted(Me, New FSPBookJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPEscalateJobBookingReason", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPEscalateJobBookingReason(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPEscalateJobBookingReason", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPEscalateJobBookingReasonAsync(ByVal myParam() As Object)
            Me.GetFSPEscalateJobBookingReasonAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPEscalateJobBookingReasonAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPEscalateJobBookingReasonOperationCompleted Is Nothing) Then
                Me.GetFSPEscalateJobBookingReasonOperationCompleted = AddressOf Me.OnGetFSPEscalateJobBookingReasonOperationCompleted
            End If
            Me.InvokeAsync("GetFSPEscalateJobBookingReason", New Object() {myParam}, Me.GetFSPEscalateJobBookingReasonOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPEscalateJobBookingReasonOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPEscalateJobBookingReasonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPEscalateJobBookingReasonCompleted(Me, New GetFSPEscalateJobBookingReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EscalateFSPJobBooking", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EscalateFSPJobBooking(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("EscalateFSPJobBooking", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EscalateFSPJobBookingAsync(ByVal myParam() As Object)
            Me.EscalateFSPJobBookingAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EscalateFSPJobBookingAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.EscalateFSPJobBookingOperationCompleted Is Nothing) Then
                Me.EscalateFSPJobBookingOperationCompleted = AddressOf Me.OnEscalateFSPJobBookingOperationCompleted
            End If
            Me.InvokeAsync("EscalateFSPJobBooking", New Object() {myParam}, Me.EscalateFSPJobBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnEscalateFSPJobBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.EscalateFSPJobBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EscalateFSPJobBookingCompleted(Me, New EscalateFSPJobBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPOpenTaskList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPOpenTaskList(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPOpenTaskList", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPOpenTaskListAsync(ByVal myParam() As Object)
            Me.GetFSPOpenTaskListAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPOpenTaskListAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPOpenTaskListOperationCompleted Is Nothing) Then
                Me.GetFSPOpenTaskListOperationCompleted = AddressOf Me.OnGetFSPOpenTaskListOperationCompleted
            End If
            Me.InvokeAsync("GetFSPOpenTaskList", New Object() {myParam}, Me.GetFSPOpenTaskListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPOpenTaskListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPOpenTaskListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPOpenTaskListCompleted(Me, New GetFSPOpenTaskListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPTask(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPTask", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPTaskAsync(ByVal myParam() As Object)
            Me.GetFSPTaskAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPTaskAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPTaskOperationCompleted Is Nothing) Then
                Me.GetFSPTaskOperationCompleted = AddressOf Me.OnGetFSPTaskOperationCompleted
            End If
            Me.InvokeAsync("GetFSPTask", New Object() {myParam}, Me.GetFSPTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPTaskCompleted(Me, New GetFSPTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutFSPTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutFSPTask(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("PutFSPTask", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutFSPTaskAsync(ByVal myParam() As Object)
            Me.PutFSPTaskAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutFSPTaskAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.PutFSPTaskOperationCompleted Is Nothing) Then
                Me.PutFSPTaskOperationCompleted = AddressOf Me.OnPutFSPTaskOperationCompleted
            End If
            Me.InvokeAsync("PutFSPTask", New Object() {myParam}, Me.PutFSPTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutFSPTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutFSPTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutFSPTaskCompleted(Me, New PutFSPTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddFSPTaskDevice", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddFSPTaskDevice(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("AddFSPTaskDevice", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddFSPTaskDeviceAsync(ByVal myParam() As Object)
            Me.AddFSPTaskDeviceAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddFSPTaskDeviceAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.AddFSPTaskDeviceOperationCompleted Is Nothing) Then
                Me.AddFSPTaskDeviceOperationCompleted = AddressOf Me.OnAddFSPTaskDeviceOperationCompleted
            End If
            Me.InvokeAsync("AddFSPTaskDevice", New Object() {myParam}, Me.AddFSPTaskDeviceOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddFSPTaskDeviceOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddFSPTaskDeviceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddFSPTaskDeviceCompleted(Me, New AddFSPTaskDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CloseFSPTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CloseFSPTask(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("CloseFSPTask", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CloseFSPTaskAsync(ByVal myParam() As Object)
            Me.CloseFSPTaskAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CloseFSPTaskAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.CloseFSPTaskOperationCompleted Is Nothing) Then
                Me.CloseFSPTaskOperationCompleted = AddressOf Me.OnCloseFSPTaskOperationCompleted
            End If
            Me.InvokeAsync("CloseFSPTask", New Object() {myParam}, Me.CloseFSPTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnCloseFSPTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.CloseFSPTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CloseFSPTaskCompleted(Me, New CloseFSPTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPTaskJobPostData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPTaskJobPostData(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPTaskJobPostData", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPTaskJobPostDataAsync(ByVal myParam() As Object)
            Me.GetFSPTaskJobPostDataAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPTaskJobPostDataAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPTaskJobPostDataOperationCompleted Is Nothing) Then
                Me.GetFSPTaskJobPostDataOperationCompleted = AddressOf Me.OnGetFSPTaskJobPostDataOperationCompleted
            End If
            Me.InvokeAsync("GetFSPTaskJobPostData", New Object() {myParam}, Me.GetFSPTaskJobPostDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPTaskJobPostDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPTaskJobPostDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPTaskJobPostDataCompleted(Me, New GetFSPTaskJobPostDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPTaskView", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPTaskView(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPTaskView", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPTaskViewAsync(ByVal myParam() As Object)
            Me.GetFSPTaskViewAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPTaskViewAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPTaskViewOperationCompleted Is Nothing) Then
                Me.GetFSPTaskViewOperationCompleted = AddressOf Me.OnGetFSPTaskViewOperationCompleted
            End If
            Me.InvokeAsync("GetFSPTaskView", New Object() {myParam}, Me.GetFSPTaskViewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPTaskViewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPTaskViewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPTaskViewCompleted(Me, New GetFSPTaskViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPClosedTasks", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPClosedTasks(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPClosedTasks", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPClosedTasksAsync(ByVal myParam() As Object)
            Me.GetFSPClosedTasksAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPClosedTasksAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPClosedTasksOperationCompleted Is Nothing) Then
                Me.GetFSPClosedTasksOperationCompleted = AddressOf Me.OnGetFSPClosedTasksOperationCompleted
            End If
            Me.InvokeAsync("GetFSPClosedTasks", New Object() {myParam}, Me.GetFSPClosedTasksOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPClosedTasksOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPClosedTasksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPClosedTasksCompleted(Me, New GetFSPClosedTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPJobClosure", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPJobClosure(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPJobClosure", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobClosureAsync(ByVal myParam() As Object)
            Me.GetFSPJobClosureAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobClosureAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPJobClosureOperationCompleted Is Nothing) Then
                Me.GetFSPJobClosureOperationCompleted = AddressOf Me.OnGetFSPJobClosureOperationCompleted
            End If
            Me.InvokeAsync("GetFSPJobClosure", New Object() {myParam}, Me.GetFSPJobClosureOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPJobClosureOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPJobClosureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPJobClosureCompleted(Me, New GetFSPJobClosureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPJobEquipment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPJobEquipment(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPJobEquipment", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobEquipmentAsync(ByVal myParam() As Object)
            Me.GetFSPJobEquipmentAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobEquipmentAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPJobEquipmentOperationCompleted Is Nothing) Then
                Me.GetFSPJobEquipmentOperationCompleted = AddressOf Me.OnGetFSPJobEquipmentOperationCompleted
            End If
            Me.InvokeAsync("GetFSPJobEquipment", New Object() {myParam}, Me.GetFSPJobEquipmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPJobEquipmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPJobEquipmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPJobEquipmentCompleted(Me, New GetFSPJobEquipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DelFSPJobEquipment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DelFSPJobEquipment(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("DelFSPJobEquipment", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DelFSPJobEquipmentAsync(ByVal myParam() As Object)
            Me.DelFSPJobEquipmentAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelFSPJobEquipmentAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.DelFSPJobEquipmentOperationCompleted Is Nothing) Then
                Me.DelFSPJobEquipmentOperationCompleted = AddressOf Me.OnDelFSPJobEquipmentOperationCompleted
            End If
            Me.InvokeAsync("DelFSPJobEquipment", New Object() {myParam}, Me.DelFSPJobEquipmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelFSPJobEquipmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DelFSPJobEquipmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DelFSPJobEquipmentCompleted(Me, New DelFSPJobEquipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFSPJobEquipment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFSPJobEquipment(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("UpdateFSPJobEquipment", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFSPJobEquipmentAsync(ByVal myParam() As Object)
            Me.UpdateFSPJobEquipmentAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFSPJobEquipmentAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.UpdateFSPJobEquipmentOperationCompleted Is Nothing) Then
                Me.UpdateFSPJobEquipmentOperationCompleted = AddressOf Me.OnUpdateFSPJobEquipmentOperationCompleted
            End If
            Me.InvokeAsync("UpdateFSPJobEquipment", New Object() {myParam}, Me.UpdateFSPJobEquipmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFSPJobEquipmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFSPJobEquipmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFSPJobEquipmentCompleted(Me, New UpdateFSPJobEquipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddFSPJobEquipment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddFSPJobEquipment(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("AddFSPJobEquipment", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddFSPJobEquipmentAsync(ByVal myParam() As Object)
            Me.AddFSPJobEquipmentAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddFSPJobEquipmentAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.AddFSPJobEquipmentOperationCompleted Is Nothing) Then
                Me.AddFSPJobEquipmentOperationCompleted = AddressOf Me.OnAddFSPJobEquipmentOperationCompleted
            End If
            Me.InvokeAsync("AddFSPJobEquipment", New Object() {myParam}, Me.AddFSPJobEquipmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddFSPJobEquipmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddFSPJobEquipmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddFSPJobEquipmentCompleted(Me, New AddFSPJobEquipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CloseFSPJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CloseFSPJob(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("CloseFSPJob", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CloseFSPJobAsync(ByVal myParam() As Object)
            Me.CloseFSPJobAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CloseFSPJobAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.CloseFSPJobOperationCompleted Is Nothing) Then
                Me.CloseFSPJobOperationCompleted = AddressOf Me.OnCloseFSPJobOperationCompleted
            End If
            Me.InvokeAsync("CloseFSPJob", New Object() {myParam}, Me.CloseFSPJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnCloseFSPJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.CloseFSPJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CloseFSPJobCompleted(Me, New CloseFSPJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPJobParts", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPJobParts(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPJobParts", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobPartsAsync(ByVal myParam() As Object)
            Me.GetFSPJobPartsAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobPartsAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPJobPartsOperationCompleted Is Nothing) Then
                Me.GetFSPJobPartsOperationCompleted = AddressOf Me.OnGetFSPJobPartsOperationCompleted
            End If
            Me.InvokeAsync("GetFSPJobParts", New Object() {myParam}, Me.GetFSPJobPartsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPJobPartsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPJobPartsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPJobPartsCompleted(Me, New GetFSPJobPartsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DelFSPJobParts", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DelFSPJobParts(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("DelFSPJobParts", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DelFSPJobPartsAsync(ByVal myParam() As Object)
            Me.DelFSPJobPartsAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelFSPJobPartsAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.DelFSPJobPartsOperationCompleted Is Nothing) Then
                Me.DelFSPJobPartsOperationCompleted = AddressOf Me.OnDelFSPJobPartsOperationCompleted
            End If
            Me.InvokeAsync("DelFSPJobParts", New Object() {myParam}, Me.DelFSPJobPartsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelFSPJobPartsOperationCompleted(ByVal arg As Object)
            If (Not (Me.DelFSPJobPartsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DelFSPJobPartsCompleted(Me, New DelFSPJobPartsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutFSPJobParts", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutFSPJobParts(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("PutFSPJobParts", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutFSPJobPartsAsync(ByVal myParam() As Object)
            Me.PutFSPJobPartsAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutFSPJobPartsAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.PutFSPJobPartsOperationCompleted Is Nothing) Then
                Me.PutFSPJobPartsOperationCompleted = AddressOf Me.OnPutFSPJobPartsOperationCompleted
            End If
            Me.InvokeAsync("PutFSPJobParts", New Object() {myParam}, Me.PutFSPJobPartsOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutFSPJobPartsOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutFSPJobPartsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutFSPJobPartsCompleted(Me, New PutFSPJobPartsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPParts", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPParts(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPParts", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPPartsAsync(ByVal myParam() As Object)
            Me.GetFSPPartsAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPPartsAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPPartsOperationCompleted Is Nothing) Then
                Me.GetFSPPartsOperationCompleted = AddressOf Me.OnGetFSPPartsOperationCompleted
            End If
            Me.InvokeAsync("GetFSPParts", New Object() {myParam}, Me.GetFSPPartsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPPartsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPPartsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPPartsCompleted(Me, New GetFSPPartsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutFSPMissingJobParts", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutFSPMissingJobParts(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("PutFSPMissingJobParts", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutFSPMissingJobPartsAsync(ByVal myParam() As Object)
            Me.PutFSPMissingJobPartsAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutFSPMissingJobPartsAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.PutFSPMissingJobPartsOperationCompleted Is Nothing) Then
                Me.PutFSPMissingJobPartsOperationCompleted = AddressOf Me.OnPutFSPMissingJobPartsOperationCompleted
            End If
            Me.InvokeAsync("PutFSPMissingJobParts", New Object() {myParam}, Me.PutFSPMissingJobPartsOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutFSPMissingJobPartsOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutFSPMissingJobPartsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutFSPMissingJobPartsCompleted(Me, New PutFSPMissingJobPartsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetMerchantDamaged", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetMerchantDamaged(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("SetMerchantDamaged", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetMerchantDamagedAsync(ByVal myParam() As Object)
            Me.SetMerchantDamagedAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetMerchantDamagedAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.SetMerchantDamagedOperationCompleted Is Nothing) Then
                Me.SetMerchantDamagedOperationCompleted = AddressOf Me.OnSetMerchantDamagedOperationCompleted
            End If
            Me.InvokeAsync("SetMerchantDamaged", New Object() {myParam}, Me.SetMerchantDamagedOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetMerchantDamagedOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetMerchantDamagedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetMerchantDamagedCompleted(Me, New SetMerchantDamagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetJobKittedDevice", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobKittedDevice(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobKittedDevice", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobKittedDeviceAsync(ByVal myParam() As Object)
            Me.GetJobKittedDeviceAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobKittedDeviceAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetJobKittedDeviceOperationCompleted Is Nothing) Then
                Me.GetJobKittedDeviceOperationCompleted = AddressOf Me.OnGetJobKittedDeviceOperationCompleted
            End If
            Me.InvokeAsync("GetJobKittedDevice", New Object() {myParam}, Me.GetJobKittedDeviceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobKittedDeviceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobKittedDeviceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobKittedDeviceCompleted(Me, New GetJobKittedDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConfirmKittedPartsUsage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConfirmKittedPartsUsage(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("ConfirmKittedPartsUsage", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConfirmKittedPartsUsageAsync(ByVal myParam() As Object)
            Me.ConfirmKittedPartsUsageAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConfirmKittedPartsUsageAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.ConfirmKittedPartsUsageOperationCompleted Is Nothing) Then
                Me.ConfirmKittedPartsUsageOperationCompleted = AddressOf Me.OnConfirmKittedPartsUsageOperationCompleted
            End If
            Me.InvokeAsync("ConfirmKittedPartsUsage", New Object() {myParam}, Me.ConfirmKittedPartsUsageOperationCompleted, userState)
        End Sub
        
        Private Sub OnConfirmKittedPartsUsageOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConfirmKittedPartsUsageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConfirmKittedPartsUsageCompleted(Me, New ConfirmKittedPartsUsageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SwapBundledSIM", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SwapBundledSIM(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SwapBundledSIM", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SwapBundledSIMAsync(ByVal myParam() As Object)
            Me.SwapBundledSIMAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SwapBundledSIMAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.SwapBundledSIMOperationCompleted Is Nothing) Then
                Me.SwapBundledSIMOperationCompleted = AddressOf Me.OnSwapBundledSIMOperationCompleted
            End If
            Me.InvokeAsync("SwapBundledSIM", New Object() {myParam}, Me.SwapBundledSIMOperationCompleted, userState)
        End Sub
        
        Private Sub OnSwapBundledSIMOperationCompleted(ByVal arg As Object)
            If (Not (Me.SwapBundledSIMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SwapBundledSIMCompleted(Me, New SwapBundledSIMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPStockList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPStockList(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPStockList", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockListAsync(ByVal myParam() As Object)
            Me.GetFSPStockListAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockListAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPStockListOperationCompleted Is Nothing) Then
                Me.GetFSPStockListOperationCompleted = AddressOf Me.OnGetFSPStockListOperationCompleted
            End If
            Me.InvokeAsync("GetFSPStockList", New Object() {myParam}, Me.GetFSPStockListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPStockListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPStockListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPStockListCompleted(Me, New GetFSPStockListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPDeviceListBySerial", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPDeviceListBySerial(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPDeviceListBySerial", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPDeviceListBySerialAsync(ByVal myParam() As Object)
            Me.GetFSPDeviceListBySerialAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPDeviceListBySerialAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPDeviceListBySerialOperationCompleted Is Nothing) Then
                Me.GetFSPDeviceListBySerialOperationCompleted = AddressOf Me.OnGetFSPDeviceListBySerialOperationCompleted
            End If
            Me.InvokeAsync("GetFSPDeviceListBySerial", New Object() {myParam}, Me.GetFSPDeviceListBySerialOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPDeviceListBySerialOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPDeviceListBySerialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPDeviceListBySerialCompleted(Me, New GetFSPDeviceListBySerialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPStockReceivedLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPStockReceivedLog(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPStockReceivedLog", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockReceivedLogAsync(ByVal myParam() As Object)
            Me.GetFSPStockReceivedLogAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockReceivedLogAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPStockReceivedLogOperationCompleted Is Nothing) Then
                Me.GetFSPStockReceivedLogOperationCompleted = AddressOf Me.OnGetFSPStockReceivedLogOperationCompleted
            End If
            Me.InvokeAsync("GetFSPStockReceivedLog", New Object() {myParam}, Me.GetFSPStockReceivedLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPStockReceivedLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPStockReceivedLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPStockReceivedLogCompleted(Me, New GetFSPStockReceivedLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPStockReceived", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPStockReceived(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPStockReceived", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockReceivedAsync(ByVal myParam() As Object)
            Me.GetFSPStockReceivedAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockReceivedAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPStockReceivedOperationCompleted Is Nothing) Then
                Me.GetFSPStockReceivedOperationCompleted = AddressOf Me.OnGetFSPStockReceivedOperationCompleted
            End If
            Me.InvokeAsync("GetFSPStockReceived", New Object() {myParam}, Me.GetFSPStockReceivedOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPStockReceivedOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPStockReceivedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPStockReceivedCompleted(Me, New GetFSPStockReceivedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutFSPStockReceived", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutFSPStockReceived(ByVal myParam() As Object, ByRef pBatchID As Integer) As Object
            Dim results() As Object = Me.Invoke("PutFSPStockReceived", New Object() {myParam, pBatchID})
            pBatchID = CType(results(1),Integer)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutFSPStockReceivedAsync(ByVal myParam() As Object, ByVal pBatchID As Integer)
            Me.PutFSPStockReceivedAsync(myParam, pBatchID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutFSPStockReceivedAsync(ByVal myParam() As Object, ByVal pBatchID As Integer, ByVal userState As Object)
            If (Me.PutFSPStockReceivedOperationCompleted Is Nothing) Then
                Me.PutFSPStockReceivedOperationCompleted = AddressOf Me.OnPutFSPStockReceivedOperationCompleted
            End If
            Me.InvokeAsync("PutFSPStockReceived", New Object() {myParam, pBatchID}, Me.PutFSPStockReceivedOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutFSPStockReceivedOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutFSPStockReceivedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutFSPStockReceivedCompleted(Me, New PutFSPStockReceivedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddFSPStockReceivedLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddFSPStockReceivedLog(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("AddFSPStockReceivedLog", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddFSPStockReceivedLogAsync(ByVal myParam() As Object)
            Me.AddFSPStockReceivedLogAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddFSPStockReceivedLogAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.AddFSPStockReceivedLogOperationCompleted Is Nothing) Then
                Me.AddFSPStockReceivedLogOperationCompleted = AddressOf Me.OnAddFSPStockReceivedLogOperationCompleted
            End If
            Me.InvokeAsync("AddFSPStockReceivedLog", New Object() {myParam}, Me.AddFSPStockReceivedLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddFSPStockReceivedLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddFSPStockReceivedLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddFSPStockReceivedLogCompleted(Me, New AddFSPStockReceivedLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CloseFSPStockReceivedAndSendReport", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CloseFSPStockReceivedAndSendReport(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("CloseFSPStockReceivedAndSendReport", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CloseFSPStockReceivedAndSendReportAsync(ByVal myParam() As Object)
            Me.CloseFSPStockReceivedAndSendReportAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CloseFSPStockReceivedAndSendReportAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.CloseFSPStockReceivedAndSendReportOperationCompleted Is Nothing) Then
                Me.CloseFSPStockReceivedAndSendReportOperationCompleted = AddressOf Me.OnCloseFSPStockReceivedAndSendReportOperationCompleted
            End If
            Me.InvokeAsync("CloseFSPStockReceivedAndSendReport", New Object() {myParam}, Me.CloseFSPStockReceivedAndSendReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnCloseFSPStockReceivedAndSendReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.CloseFSPStockReceivedAndSendReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CloseFSPStockReceivedAndSendReportCompleted(Me, New CloseFSPStockReceivedAndSendReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPStockReturnedLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPStockReturnedLog(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPStockReturnedLog", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockReturnedLogAsync(ByVal myParam() As Object)
            Me.GetFSPStockReturnedLogAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockReturnedLogAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPStockReturnedLogOperationCompleted Is Nothing) Then
                Me.GetFSPStockReturnedLogOperationCompleted = AddressOf Me.OnGetFSPStockReturnedLogOperationCompleted
            End If
            Me.InvokeAsync("GetFSPStockReturnedLog", New Object() {myParam}, Me.GetFSPStockReturnedLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPStockReturnedLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPStockReturnedLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPStockReturnedLogCompleted(Me, New GetFSPStockReturnedLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPStockReturned", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPStockReturned(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPStockReturned", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockReturnedAsync(ByVal myParam() As Object)
            Me.GetFSPStockReturnedAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockReturnedAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPStockReturnedOperationCompleted Is Nothing) Then
                Me.GetFSPStockReturnedOperationCompleted = AddressOf Me.OnGetFSPStockReturnedOperationCompleted
            End If
            Me.InvokeAsync("GetFSPStockReturned", New Object() {myParam}, Me.GetFSPStockReturnedOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPStockReturnedOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPStockReturnedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPStockReturnedCompleted(Me, New GetFSPStockReturnedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutFSPStockReturned", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutFSPStockReturned(ByVal myParam() As Object, ByRef pBatchID As Integer) As Object
            Dim results() As Object = Me.Invoke("PutFSPStockReturned", New Object() {myParam, pBatchID})
            pBatchID = CType(results(1),Integer)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutFSPStockReturnedAsync(ByVal myParam() As Object, ByVal pBatchID As Integer)
            Me.PutFSPStockReturnedAsync(myParam, pBatchID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutFSPStockReturnedAsync(ByVal myParam() As Object, ByVal pBatchID As Integer, ByVal userState As Object)
            If (Me.PutFSPStockReturnedOperationCompleted Is Nothing) Then
                Me.PutFSPStockReturnedOperationCompleted = AddressOf Me.OnPutFSPStockReturnedOperationCompleted
            End If
            Me.InvokeAsync("PutFSPStockReturned", New Object() {myParam, pBatchID}, Me.PutFSPStockReturnedOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutFSPStockReturnedOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutFSPStockReturnedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutFSPStockReturnedCompleted(Me, New PutFSPStockReturnedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddFSPStockReturnedLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddFSPStockReturnedLog(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("AddFSPStockReturnedLog", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddFSPStockReturnedLogAsync(ByVal myParam() As Object)
            Me.AddFSPStockReturnedLogAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddFSPStockReturnedLogAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.AddFSPStockReturnedLogOperationCompleted Is Nothing) Then
                Me.AddFSPStockReturnedLogOperationCompleted = AddressOf Me.OnAddFSPStockReturnedLogOperationCompleted
            End If
            Me.InvokeAsync("AddFSPStockReturnedLog", New Object() {myParam}, Me.AddFSPStockReturnedLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddFSPStockReturnedLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddFSPStockReturnedLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddFSPStockReturnedLogCompleted(Me, New AddFSPStockReturnedLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CloseFSPStockReturnedAndSendReport", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CloseFSPStockReturnedAndSendReport(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("CloseFSPStockReturnedAndSendReport", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CloseFSPStockReturnedAndSendReportAsync(ByVal myParam() As Object)
            Me.CloseFSPStockReturnedAndSendReportAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CloseFSPStockReturnedAndSendReportAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.CloseFSPStockReturnedAndSendReportOperationCompleted Is Nothing) Then
                Me.CloseFSPStockReturnedAndSendReportOperationCompleted = AddressOf Me.OnCloseFSPStockReturnedAndSendReportOperationCompleted
            End If
            Me.InvokeAsync("CloseFSPStockReturnedAndSendReport", New Object() {myParam}, Me.CloseFSPStockReturnedAndSendReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnCloseFSPStockReturnedAndSendReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.CloseFSPStockReturnedAndSendReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CloseFSPStockReturnedAndSendReportCompleted(Me, New CloseFSPStockReturnedAndSendReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPStockTakeLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPStockTakeLog(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPStockTakeLog", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockTakeLogAsync(ByVal myParam() As Object)
            Me.GetFSPStockTakeLogAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockTakeLogAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPStockTakeLogOperationCompleted Is Nothing) Then
                Me.GetFSPStockTakeLogOperationCompleted = AddressOf Me.OnGetFSPStockTakeLogOperationCompleted
            End If
            Me.InvokeAsync("GetFSPStockTakeLog", New Object() {myParam}, Me.GetFSPStockTakeLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPStockTakeLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPStockTakeLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPStockTakeLogCompleted(Me, New GetFSPStockTakeLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPStockTakeTarget", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPStockTakeTarget(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPStockTakeTarget", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockTakeTargetAsync(ByVal myParam() As Object)
            Me.GetFSPStockTakeTargetAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockTakeTargetAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPStockTakeTargetOperationCompleted Is Nothing) Then
                Me.GetFSPStockTakeTargetOperationCompleted = AddressOf Me.OnGetFSPStockTakeTargetOperationCompleted
            End If
            Me.InvokeAsync("GetFSPStockTakeTarget", New Object() {myParam}, Me.GetFSPStockTakeTargetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPStockTakeTargetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPStockTakeTargetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPStockTakeTargetCompleted(Me, New GetFSPStockTakeTargetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPStockTake", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPStockTake(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPStockTake", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockTakeAsync(ByVal myParam() As Object)
            Me.GetFSPStockTakeAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPStockTakeAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPStockTakeOperationCompleted Is Nothing) Then
                Me.GetFSPStockTakeOperationCompleted = AddressOf Me.OnGetFSPStockTakeOperationCompleted
            End If
            Me.InvokeAsync("GetFSPStockTake", New Object() {myParam}, Me.GetFSPStockTakeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPStockTakeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPStockTakeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPStockTakeCompleted(Me, New GetFSPStockTakeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutFSPStockTake", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutFSPStockTake(ByVal myParam() As Object, ByRef pBatchID As Integer) As Object
            Dim results() As Object = Me.Invoke("PutFSPStockTake", New Object() {myParam, pBatchID})
            pBatchID = CType(results(1),Integer)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutFSPStockTakeAsync(ByVal myParam() As Object, ByVal pBatchID As Integer)
            Me.PutFSPStockTakeAsync(myParam, pBatchID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutFSPStockTakeAsync(ByVal myParam() As Object, ByVal pBatchID As Integer, ByVal userState As Object)
            If (Me.PutFSPStockTakeOperationCompleted Is Nothing) Then
                Me.PutFSPStockTakeOperationCompleted = AddressOf Me.OnPutFSPStockTakeOperationCompleted
            End If
            Me.InvokeAsync("PutFSPStockTake", New Object() {myParam, pBatchID}, Me.PutFSPStockTakeOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutFSPStockTakeOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutFSPStockTakeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutFSPStockTakeCompleted(Me, New PutFSPStockTakeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddFSPStockTakeLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddFSPStockTakeLog(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("AddFSPStockTakeLog", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddFSPStockTakeLogAsync(ByVal myParam() As Object)
            Me.AddFSPStockTakeLogAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddFSPStockTakeLogAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.AddFSPStockTakeLogOperationCompleted Is Nothing) Then
                Me.AddFSPStockTakeLogOperationCompleted = AddressOf Me.OnAddFSPStockTakeLogOperationCompleted
            End If
            Me.InvokeAsync("AddFSPStockTakeLog", New Object() {myParam}, Me.AddFSPStockTakeLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddFSPStockTakeLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddFSPStockTakeLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddFSPStockTakeLogCompleted(Me, New AddFSPStockTakeLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CloseFSPStockTakeAndSendReport", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CloseFSPStockTakeAndSendReport(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("CloseFSPStockTakeAndSendReport", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CloseFSPStockTakeAndSendReportAsync(ByVal myParam() As Object)
            Me.CloseFSPStockTakeAndSendReportAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CloseFSPStockTakeAndSendReportAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.CloseFSPStockTakeAndSendReportOperationCompleted Is Nothing) Then
                Me.CloseFSPStockTakeAndSendReportOperationCompleted = AddressOf Me.OnCloseFSPStockTakeAndSendReportOperationCompleted
            End If
            Me.InvokeAsync("CloseFSPStockTakeAndSendReport", New Object() {myParam}, Me.CloseFSPStockTakeAndSendReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnCloseFSPStockTakeAndSendReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.CloseFSPStockTakeAndSendReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CloseFSPStockTakeAndSendReportCompleted(Me, New CloseFSPStockTakeAndSendReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddFaultyOutOfBoxDevice", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddFaultyOutOfBoxDevice(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("AddFaultyOutOfBoxDevice", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddFaultyOutOfBoxDeviceAsync(ByVal myParam() As Object)
            Me.AddFaultyOutOfBoxDeviceAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddFaultyOutOfBoxDeviceAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.AddFaultyOutOfBoxDeviceOperationCompleted Is Nothing) Then
                Me.AddFaultyOutOfBoxDeviceOperationCompleted = AddressOf Me.OnAddFaultyOutOfBoxDeviceOperationCompleted
            End If
            Me.InvokeAsync("AddFaultyOutOfBoxDevice", New Object() {myParam}, Me.AddFaultyOutOfBoxDeviceOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddFaultyOutOfBoxDeviceOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddFaultyOutOfBoxDeviceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddFaultyOutOfBoxDeviceCompleted(Me, New AddFaultyOutOfBoxDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPExceptionList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPExceptionList(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPExceptionList", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPExceptionListAsync(ByVal myParam() As Object)
            Me.GetFSPExceptionListAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPExceptionListAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPExceptionListOperationCompleted Is Nothing) Then
                Me.GetFSPExceptionListOperationCompleted = AddressOf Me.OnGetFSPExceptionListOperationCompleted
            End If
            Me.InvokeAsync("GetFSPExceptionList", New Object() {myParam}, Me.GetFSPExceptionListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPExceptionListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPExceptionListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPExceptionListCompleted(Me, New GetFSPExceptionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetJobExceptionList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobExceptionList(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobExceptionList", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobExceptionListAsync(ByVal myParam() As Object)
            Me.GetJobExceptionListAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobExceptionListAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetJobExceptionListOperationCompleted Is Nothing) Then
                Me.GetJobExceptionListOperationCompleted = AddressOf Me.OnGetJobExceptionListOperationCompleted
            End If
            Me.InvokeAsync("GetJobExceptionList", New Object() {myParam}, Me.GetJobExceptionListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobExceptionListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobExceptionListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobExceptionListCompleted(Me, New GetJobExceptionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPEscalateReason", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPEscalateReason(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPEscalateReason", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPEscalateReasonAsync(ByVal myParam() As Object)
            Me.GetFSPEscalateReasonAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPEscalateReasonAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPEscalateReasonOperationCompleted Is Nothing) Then
                Me.GetFSPEscalateReasonOperationCompleted = AddressOf Me.OnGetFSPEscalateReasonOperationCompleted
            End If
            Me.InvokeAsync("GetFSPEscalateReason", New Object() {myParam}, Me.GetFSPEscalateReasonOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPEscalateReasonOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPEscalateReasonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPEscalateReasonCompleted(Me, New GetFSPEscalateReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EscalateFSPJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EscalateFSPJob(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("EscalateFSPJob", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EscalateFSPJobAsync(ByVal myParam() As Object)
            Me.EscalateFSPJobAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EscalateFSPJobAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.EscalateFSPJobOperationCompleted Is Nothing) Then
                Me.EscalateFSPJobOperationCompleted = AddressOf Me.OnEscalateFSPJobOperationCompleted
            End If
            Me.InvokeAsync("EscalateFSPJob", New Object() {myParam}, Me.EscalateFSPJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnEscalateFSPJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.EscalateFSPJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EscalateFSPJobCompleted(Me, New EscalateFSPJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddFSPJobNote", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddFSPJobNote(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("AddFSPJobNote", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddFSPJobNoteAsync(ByVal myParam() As Object)
            Me.AddFSPJobNoteAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddFSPJobNoteAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.AddFSPJobNoteOperationCompleted Is Nothing) Then
                Me.AddFSPJobNoteOperationCompleted = AddressOf Me.OnAddFSPJobNoteOperationCompleted
            End If
            Me.InvokeAsync("AddFSPJobNote", New Object() {myParam}, Me.AddFSPJobNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddFSPJobNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddFSPJobNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddFSPJobNoteCompleted(Me, New AddFSPJobNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReassignJobBackToDepot", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReassignJobBackToDepot(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("ReassignJobBackToDepot", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReassignJobBackToDepotAsync(ByVal myParam() As Object)
            Me.ReassignJobBackToDepotAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReassignJobBackToDepotAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.ReassignJobBackToDepotOperationCompleted Is Nothing) Then
                Me.ReassignJobBackToDepotOperationCompleted = AddressOf Me.OnReassignJobBackToDepotOperationCompleted
            End If
            Me.InvokeAsync("ReassignJobBackToDepot", New Object() {myParam}, Me.ReassignJobBackToDepotOperationCompleted, userState)
        End Sub
        
        Private Sub OnReassignJobBackToDepotOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReassignJobBackToDepotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReassignJobBackToDepotCompleted(Me, New ReassignJobBackToDepotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPCJFPreJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPCJFPreJob(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPCJFPreJob", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPCJFPreJobAsync(ByVal myParam() As Object)
            Me.GetFSPCJFPreJobAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPCJFPreJobAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPCJFPreJobOperationCompleted Is Nothing) Then
                Me.GetFSPCJFPreJobOperationCompleted = AddressOf Me.OnGetFSPCJFPreJobOperationCompleted
            End If
            Me.InvokeAsync("GetFSPCJFPreJob", New Object() {myParam}, Me.GetFSPCJFPreJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPCJFPreJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPCJFPreJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPCJFPreJobCompleted(Me, New GetFSPCJFPreJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPCJFJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPCJFJob(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPCJFJob", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPCJFJobAsync(ByVal myParam() As Object)
            Me.GetFSPCJFJobAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPCJFJobAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPCJFJobOperationCompleted Is Nothing) Then
                Me.GetFSPCJFJobOperationCompleted = AddressOf Me.OnGetFSPCJFJobOperationCompleted
            End If
            Me.InvokeAsync("GetFSPCJFJob", New Object() {myParam}, Me.GetFSPCJFJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPCJFJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPCJFJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPCJFJobCompleted(Me, New GetFSPCJFJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPCJF", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPCJF(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPCJF", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPCJFAsync(ByVal myParam() As Object)
            Me.GetFSPCJFAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPCJFAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPCJFOperationCompleted Is Nothing) Then
                Me.GetFSPCJFOperationCompleted = AddressOf Me.OnGetFSPCJFOperationCompleted
            End If
            Me.InvokeAsync("GetFSPCJF", New Object() {myParam}, Me.GetFSPCJFOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPCJFOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPCJFCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPCJFCompleted(Me, New GetFSPCJFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenerateFSPCJF", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GenerateFSPCJF(ByVal myParam() As Object, ByRef pCJFID As Integer) As Object
            Dim results() As Object = Me.Invoke("GenerateFSPCJF", New Object() {myParam, pCJFID})
            pCJFID = CType(results(1),Integer)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GenerateFSPCJFAsync(ByVal myParam() As Object, ByVal pCJFID As Integer)
            Me.GenerateFSPCJFAsync(myParam, pCJFID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GenerateFSPCJFAsync(ByVal myParam() As Object, ByVal pCJFID As Integer, ByVal userState As Object)
            If (Me.GenerateFSPCJFOperationCompleted Is Nothing) Then
                Me.GenerateFSPCJFOperationCompleted = AddressOf Me.OnGenerateFSPCJFOperationCompleted
            End If
            Me.InvokeAsync("GenerateFSPCJF", New Object() {myParam, pCJFID}, Me.GenerateFSPCJFOperationCompleted, userState)
        End Sub
        
        Private Sub OnGenerateFSPCJFOperationCompleted(ByVal arg As Object)
            If (Not (Me.GenerateFSPCJFCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GenerateFSPCJFCompleted(Me, New GenerateFSPCJFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPJobSheetData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPJobSheetData(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPJobSheetData", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobSheetDataAsync(ByVal myParam() As Object)
            Me.GetFSPJobSheetDataAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPJobSheetDataAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPJobSheetDataOperationCompleted Is Nothing) Then
                Me.GetFSPJobSheetDataOperationCompleted = AddressOf Me.OnGetFSPJobSheetDataOperationCompleted
            End If
            Me.InvokeAsync("GetFSPJobSheetData", New Object() {myParam}, Me.GetFSPJobSheetDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPJobSheetDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPJobSheetDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPJobSheetDataCompleted(Me, New GetFSPJobSheetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FSPReAssignJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FSPReAssignJob(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("FSPReAssignJob", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FSPReAssignJobAsync(ByVal myParam() As Object)
            Me.FSPReAssignJobAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FSPReAssignJobAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.FSPReAssignJobOperationCompleted Is Nothing) Then
                Me.FSPReAssignJobOperationCompleted = AddressOf Me.OnFSPReAssignJobOperationCompleted
            End If
            Me.InvokeAsync("FSPReAssignJob", New Object() {myParam}, Me.FSPReAssignJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnFSPReAssignJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.FSPReAssignJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FSPReAssignJobCompleted(Me, New FSPReAssignJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FSPReAssignJobExt", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FSPReAssignJobExt(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("FSPReAssignJobExt", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FSPReAssignJobExtAsync(ByVal myParam() As Object)
            Me.FSPReAssignJobExtAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FSPReAssignJobExtAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.FSPReAssignJobExtOperationCompleted Is Nothing) Then
                Me.FSPReAssignJobExtOperationCompleted = AddressOf Me.OnFSPReAssignJobExtOperationCompleted
            End If
            Me.InvokeAsync("FSPReAssignJobExt", New Object() {myParam}, Me.FSPReAssignJobExtOperationCompleted, userState)
        End Sub
        
        Private Sub OnFSPReAssignJobExtOperationCompleted(ByVal arg As Object)
            If (Not (Me.FSPReAssignJobExtCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FSPReAssignJobExtCompleted(Me, New FSPReAssignJobExtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAdminBulkJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAdminBulkJob(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAdminBulkJob", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAdminBulkJobAsync(ByVal myParam() As Object)
            Me.GetAdminBulkJobAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAdminBulkJobAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetAdminBulkJobOperationCompleted Is Nothing) Then
                Me.GetAdminBulkJobOperationCompleted = AddressOf Me.OnGetAdminBulkJobOperationCompleted
            End If
            Me.InvokeAsync("GetAdminBulkJob", New Object() {myParam}, Me.GetAdminBulkJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAdminBulkJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAdminBulkJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAdminBulkJobCompleted(Me, New GetAdminBulkJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutAdminBulkJob", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutAdminBulkJob(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("PutAdminBulkJob", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutAdminBulkJobAsync(ByVal myParam() As Object)
            Me.PutAdminBulkJobAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutAdminBulkJobAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.PutAdminBulkJobOperationCompleted Is Nothing) Then
                Me.PutAdminBulkJobOperationCompleted = AddressOf Me.OnPutAdminBulkJobOperationCompleted
            End If
            Me.InvokeAsync("PutAdminBulkJob", New Object() {myParam}, Me.PutAdminBulkJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutAdminBulkJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutAdminBulkJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutAdminBulkJobCompleted(Me, New PutAdminBulkJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPChildrenExt", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPChildrenExt(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPChildrenExt", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPChildrenExtAsync(ByVal myParam() As Object)
            Me.GetFSPChildrenExtAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPChildrenExtAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPChildrenExtOperationCompleted Is Nothing) Then
                Me.GetFSPChildrenExtOperationCompleted = AddressOf Me.OnGetFSPChildrenExtOperationCompleted
            End If
            Me.InvokeAsync("GetFSPChildrenExt", New Object() {myParam}, Me.GetFSPChildrenExtOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPChildrenExtOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPChildrenExtCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPChildrenExtCompleted(Me, New GetFSPChildrenExtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPFamilyExt", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPFamilyExt(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPFamilyExt", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPFamilyExtAsync(ByVal myParam() As Object)
            Me.GetFSPFamilyExtAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPFamilyExtAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPFamilyExtOperationCompleted Is Nothing) Then
                Me.GetFSPFamilyExtOperationCompleted = AddressOf Me.OnGetFSPFamilyExtOperationCompleted
            End If
            Me.InvokeAsync("GetFSPFamilyExt", New Object() {myParam}, Me.GetFSPFamilyExtOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPFamilyExtOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPFamilyExtCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPFamilyExtCompleted(Me, New GetFSPFamilyExtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDownload", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDownload(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDownload", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDownloadAsync(ByVal myParam() As Object)
            Me.GetDownloadAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDownloadAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetDownloadOperationCompleted Is Nothing) Then
                Me.GetDownloadOperationCompleted = AddressOf Me.OnGetDownloadOperationCompleted
            End If
            Me.InvokeAsync("GetDownload", New Object() {myParam}, Me.GetDownloadOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDownloadOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDownloadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDownloadCompleted(Me, New GetDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutDownload", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutDownload(ByVal myParam() As Object, ByRef pSeq As Short) As Object
            Dim results() As Object = Me.Invoke("PutDownload", New Object() {myParam, pSeq})
            pSeq = CType(results(1),Short)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutDownloadAsync(ByVal myParam() As Object, ByVal pSeq As Short)
            Me.PutDownloadAsync(myParam, pSeq, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutDownloadAsync(ByVal myParam() As Object, ByVal pSeq As Short, ByVal userState As Object)
            If (Me.PutDownloadOperationCompleted Is Nothing) Then
                Me.PutDownloadOperationCompleted = AddressOf Me.OnPutDownloadOperationCompleted
            End If
            Me.InvokeAsync("PutDownload", New Object() {myParam, pSeq}, Me.PutDownloadOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutDownloadOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutDownloadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutDownloadCompleted(Me, New PutDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDownloadsByURL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDownloadsByURL(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDownloadsByURL", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDownloadsByURLAsync(ByVal myParam() As Object)
            Me.GetDownloadsByURLAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDownloadsByURLAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetDownloadsByURLOperationCompleted Is Nothing) Then
                Me.GetDownloadsByURLOperationCompleted = AddressOf Me.OnGetDownloadsByURLOperationCompleted
            End If
            Me.InvokeAsync("GetDownloadsByURL", New Object() {myParam}, Me.GetDownloadsByURLOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDownloadsByURLOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDownloadsByURLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDownloadsByURLCompleted(Me, New GetDownloadsByURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDownloadCategoryAll", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDownloadCategoryAll(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDownloadCategoryAll", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDownloadCategoryAllAsync(ByVal myParam() As Object)
            Me.GetDownloadCategoryAllAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDownloadCategoryAllAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetDownloadCategoryAllOperationCompleted Is Nothing) Then
                Me.GetDownloadCategoryAllOperationCompleted = AddressOf Me.OnGetDownloadCategoryAllOperationCompleted
            End If
            Me.InvokeAsync("GetDownloadCategoryAll", New Object() {myParam}, Me.GetDownloadCategoryAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDownloadCategoryAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDownloadCategoryAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDownloadCategoryAllCompleted(Me, New GetDownloadCategoryAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTechFix", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTechFix(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTechFix", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTechFixAsync(ByVal myParam() As Object)
            Me.GetTechFixAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTechFixAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetTechFixOperationCompleted Is Nothing) Then
                Me.GetTechFixOperationCompleted = AddressOf Me.OnGetTechFixOperationCompleted
            End If
            Me.InvokeAsync("GetTechFix", New Object() {myParam}, Me.GetTechFixOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTechFixOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTechFixCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTechFixCompleted(Me, New GetTechFixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsTelstraFSP", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsTelstraFSP(ByVal myParam() As Object, ByRef pIsTelstraFSP As Boolean) As Object
            Dim results() As Object = Me.Invoke("IsTelstraFSP", New Object() {myParam, pIsTelstraFSP})
            pIsTelstraFSP = CType(results(1),Boolean)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsTelstraFSPAsync(ByVal myParam() As Object, ByVal pIsTelstraFSP As Boolean)
            Me.IsTelstraFSPAsync(myParam, pIsTelstraFSP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsTelstraFSPAsync(ByVal myParam() As Object, ByVal pIsTelstraFSP As Boolean, ByVal userState As Object)
            If (Me.IsTelstraFSPOperationCompleted Is Nothing) Then
                Me.IsTelstraFSPOperationCompleted = AddressOf Me.OnIsTelstraFSPOperationCompleted
            End If
            Me.InvokeAsync("IsTelstraFSP", New Object() {myParam, pIsTelstraFSP}, Me.IsTelstraFSPOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsTelstraFSPOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsTelstraFSPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsTelstraFSPCompleted(Me, New IsTelstraFSPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsLiveDB", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsLiveDB(ByVal myParam() As Object, ByRef pIsLiveDB As Boolean) As Object
            Dim results() As Object = Me.Invoke("IsLiveDB", New Object() {myParam, pIsLiveDB})
            pIsLiveDB = CType(results(1),Boolean)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsLiveDBAsync(ByVal myParam() As Object, ByVal pIsLiveDB As Boolean)
            Me.IsLiveDBAsync(myParam, pIsLiveDB, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsLiveDBAsync(ByVal myParam() As Object, ByVal pIsLiveDB As Boolean, ByVal userState As Object)
            If (Me.IsLiveDBOperationCompleted Is Nothing) Then
                Me.IsLiveDBOperationCompleted = AddressOf Me.OnIsLiveDBOperationCompleted
            End If
            Me.InvokeAsync("IsLiveDB", New Object() {myParam, pIsLiveDB}, Me.IsLiveDBOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsLiveDBOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsLiveDBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsLiveDBCompleted(Me, New IsLiveDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetJobAsFSPOnSite", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetJobAsFSPOnSite(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("SetJobAsFSPOnSite", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetJobAsFSPOnSiteAsync(ByVal myParam() As Object)
            Me.SetJobAsFSPOnSiteAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetJobAsFSPOnSiteAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.SetJobAsFSPOnSiteOperationCompleted Is Nothing) Then
                Me.SetJobAsFSPOnSiteOperationCompleted = AddressOf Me.OnSetJobAsFSPOnSiteOperationCompleted
            End If
            Me.InvokeAsync("SetJobAsFSPOnSite", New Object() {myParam}, Me.SetJobAsFSPOnSiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetJobAsFSPOnSiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetJobAsFSPOnSiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetJobAsFSPOnSiteCompleted(Me, New SetJobAsFSPOnSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FSPCallMerchant", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FSPCallMerchant(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("FSPCallMerchant", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FSPCallMerchantAsync(ByVal myParam() As Object)
            Me.FSPCallMerchantAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FSPCallMerchantAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.FSPCallMerchantOperationCompleted Is Nothing) Then
                Me.FSPCallMerchantOperationCompleted = AddressOf Me.OnFSPCallMerchantOperationCompleted
            End If
            Me.InvokeAsync("FSPCallMerchant", New Object() {myParam}, Me.FSPCallMerchantOperationCompleted, userState)
        End Sub
        
        Private Sub OnFSPCallMerchantOperationCompleted(ByVal arg As Object)
            If (Not (Me.FSPCallMerchantCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FSPCallMerchantCompleted(Me, New FSPCallMerchantCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetJobFSPDownload", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobFSPDownload(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobFSPDownload", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobFSPDownloadAsync(ByVal myParam() As Object)
            Me.GetJobFSPDownloadAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobFSPDownloadAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetJobFSPDownloadOperationCompleted Is Nothing) Then
                Me.GetJobFSPDownloadOperationCompleted = AddressOf Me.OnGetJobFSPDownloadOperationCompleted
            End If
            Me.InvokeAsync("GetJobFSPDownload", New Object() {myParam}, Me.GetJobFSPDownloadOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobFSPDownloadOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobFSPDownloadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobFSPDownloadCompleted(Me, New GetJobFSPDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPostcodeFSPAllocation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPostcodeFSPAllocation(ByVal myParam() As Object) As String
            Dim results() As Object = Me.Invoke("GetPostcodeFSPAllocation", New Object() {myParam})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPostcodeFSPAllocationAsync(ByVal myParam() As Object)
            Me.GetPostcodeFSPAllocationAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPostcodeFSPAllocationAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetPostcodeFSPAllocationOperationCompleted Is Nothing) Then
                Me.GetPostcodeFSPAllocationOperationCompleted = AddressOf Me.OnGetPostcodeFSPAllocationOperationCompleted
            End If
            Me.InvokeAsync("GetPostcodeFSPAllocation", New Object() {myParam}, Me.GetPostcodeFSPAllocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPostcodeFSPAllocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPostcodeFSPAllocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPostcodeFSPAllocationCompleted(Me, New GetPostcodeFSPAllocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMerchantAcceptance", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMerchantAcceptance(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMerchantAcceptance", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMerchantAcceptanceAsync(ByVal myParam() As Object)
            Me.GetMerchantAcceptanceAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMerchantAcceptanceAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetMerchantAcceptanceOperationCompleted Is Nothing) Then
                Me.GetMerchantAcceptanceOperationCompleted = AddressOf Me.OnGetMerchantAcceptanceOperationCompleted
            End If
            Me.InvokeAsync("GetMerchantAcceptance", New Object() {myParam}, Me.GetMerchantAcceptanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMerchantAcceptanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMerchantAcceptanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMerchantAcceptanceCompleted(Me, New GetMerchantAcceptanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPPartTran", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPPartTran(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPPartTran", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPPartTranAsync(ByVal myParam() As Object)
            Me.GetFSPPartTranAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPPartTranAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPPartTranOperationCompleted Is Nothing) Then
                Me.GetFSPPartTranOperationCompleted = AddressOf Me.OnGetFSPPartTranOperationCompleted
            End If
            Me.InvokeAsync("GetFSPPartTran", New Object() {myParam}, Me.GetFSPPartTranOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPPartTranOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPPartTranCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPPartTranCompleted(Me, New GetFSPPartTranCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FSPSavePartTranReceived", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FSPSavePartTranReceived(ByVal myParam() As Object) As Object
            Dim results() As Object = Me.Invoke("FSPSavePartTranReceived", New Object() {myParam})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FSPSavePartTranReceivedAsync(ByVal myParam() As Object)
            Me.FSPSavePartTranReceivedAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FSPSavePartTranReceivedAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.FSPSavePartTranReceivedOperationCompleted Is Nothing) Then
                Me.FSPSavePartTranReceivedOperationCompleted = AddressOf Me.OnFSPSavePartTranReceivedOperationCompleted
            End If
            Me.InvokeAsync("FSPSavePartTranReceived", New Object() {myParam}, Me.FSPSavePartTranReceivedOperationCompleted, userState)
        End Sub
        
        Private Sub OnFSPSavePartTranReceivedOperationCompleted(ByVal arg As Object)
            If (Not (Me.FSPSavePartTranReceivedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FSPSavePartTranReceivedCompleted(Me, New FSPSavePartTranReceivedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFSPPartInventory", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFSPPartInventory(ByVal myParam() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFSPPartInventory", New Object() {myParam})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFSPPartInventoryAsync(ByVal myParam() As Object)
            Me.GetFSPPartInventoryAsync(myParam, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFSPPartInventoryAsync(ByVal myParam() As Object, ByVal userState As Object)
            If (Me.GetFSPPartInventoryOperationCompleted Is Nothing) Then
                Me.GetFSPPartInventoryOperationCompleted = AddressOf Me.OnGetFSPPartInventoryOperationCompleted
            End If
            Me.InvokeAsync("GetFSPPartInventory", New Object() {myParam}, Me.GetFSPPartInventoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFSPPartInventoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFSPPartInventoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFSPPartInventoryCompleted(Me, New GetFSPPartInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub FSPSavePartInventoryCompletedEventHandler(ByVal sender As Object, ByVal e As FSPSavePartInventoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FSPSavePartInventoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPDelegationListCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPDelegationListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPDelegationListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPDelegationCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPDelegationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPDelegationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPDelegationReasonCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPDelegationReasonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPDelegationReasonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutFSPDelegationCompletedEventHandler(ByVal sender As Object, ByVal e As PutFSPDelegationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutFSPDelegationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pLogID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub CancelFSPDelegationCompletedEventHandler(ByVal sender As Object, ByVal e As CancelFSPDelegationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelFSPDelegationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPCalendarCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPCalendarCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPCalendarCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetBulletinCompletedEventHandler(ByVal sender As Object, ByVal e As GetBulletinCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBulletinCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutBulletinCompletedEventHandler(ByVal sender As Object, ByVal e As PutBulletinCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutBulletinCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetBulletinViewLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetBulletinViewLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBulletinViewLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutBulletinViewLogCompletedEventHandler(ByVal sender As Object, ByVal e As PutBulletinViewLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutBulletinViewLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetSurveyCompletedEventHandler(ByVal sender As Object, ByVal e As GetSurveyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSurveyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetSurveyAnswerCompletedEventHandler(ByVal sender As Object, ByVal e As GetSurveyAnswerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSurveyAnswerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutSurveyAnswerCompletedEventHandler(ByVal sender As Object, ByVal e As PutSurveyAnswerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutSurveyAnswerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutMerchantAcceptanceCompletedEventHandler(ByVal sender As Object, ByVal e As PutMerchantAcceptanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutMerchantAcceptanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub UploadMerchantSignedJobSheetCompletedEventHandler(ByVal sender As Object, ByVal e As UploadMerchantSignedJobSheetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadMerchantSignedJobSheetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub ValidateJobClosureCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateJobClosureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateJobClosureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutErrorLogCompletedEventHandler(ByVal sender As Object, ByVal e As PutErrorLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutErrorLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutActionLogCompletedEventHandler(ByVal sender As Object, ByVal e As PutActionLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutActionLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutSessionLogCompletedEventHandler(ByVal sender As Object, ByVal e As PutSessionLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutSessionLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetSessionLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetSessionLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSessionLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetAppAttributeCompletedEventHandler(ByVal sender As Object, ByVal e As GetAppAttributeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAppAttributeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub LogApplicationAndAssignMIDCompletedEventHandler(ByVal sender As Object, ByVal e As LogApplicationAndAssignMIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogApplicationAndAssignMIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pMerchantID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pPayMarkID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetJobCountCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetJobCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetJobsCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub CloseDeinstallJobCompletedEventHandler(ByVal sender As Object, ByVal e As CloseDeinstallJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CloseDeinstallJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetClientClosureReasonsCompletedEventHandler(ByVal sender As Object, ByVal e As GetClientClosureReasonsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClientClosureReasonsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetClientTerminalConfigFieldCompletedEventHandler(ByVal sender As Object, ByVal e As GetClientTerminalConfigFieldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClientTerminalConfigFieldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetStateCompletedEventHandler(ByVal sender As Object, ByVal e As GetStateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetJobFilterStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobFilterStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobFilterStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetJobDeviceTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobDeviceTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobDeviceTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetJobMethodCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobMethodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobMethodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetCallTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetCallTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCallTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetCallTypeSymptomCompletedEventHandler(ByVal sender As Object, ByVal e As GetCallTypeSymptomCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCallTypeSymptomCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetSymptomFaultCompletedEventHandler(ByVal sender As Object, ByVal e As GetSymptomFaultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSymptomFaultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetAdditionalServiceTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetAdditionalServiceTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAdditionalServiceTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub ValidateTIDBeforeLogJobCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateTIDBeforeLogJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateTIDBeforeLogJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub LogJobCompletedEventHandler(ByVal sender As Object, ByVal e As LogJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pJobID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub LogCallCompletedEventHandler(ByVal sender As Object, ByVal e As LogCallCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogCallCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pCallNumber() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetDeviceComponentCompletedEventHandler(ByVal sender As Object, ByVal e As GetDeviceComponentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDeviceComponentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub DuplicateJobCompletedEventHandler(ByVal sender As Object, ByVal e As DuplicateJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DuplicateJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pJobID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetCallCompletedEventHandler(ByVal sender As Object, ByVal e As GetCallCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCallCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetCallsCompletedEventHandler(ByVal sender As Object, ByVal e As GetCallsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCallsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetSiteCompletedEventHandler(ByVal sender As Object, ByVal e As GetSiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetSitesCompletedEventHandler(ByVal sender As Object, ByVal e As GetSitesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSitesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetSiteEquipmentsCompletedEventHandler(ByVal sender As Object, ByVal e As GetSiteEquipmentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSiteEquipmentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutSiteCompletedEventHandler(ByVal sender As Object, ByVal e As PutSiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutSiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetQuickFindListCompletedEventHandler(ByVal sender As Object, ByVal e As GetQuickFindListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQuickFindListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetTerminalJobListCompletedEventHandler(ByVal sender As Object, ByVal e As GetTerminalJobListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTerminalJobListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetDeviceListBySerialCompletedEventHandler(ByVal sender As Object, ByVal e As GetDeviceListBySerialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDeviceListBySerialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetDeviceBySerialCompletedEventHandler(ByVal sender As Object, ByVal e As GetDeviceBySerialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDeviceBySerialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetClientUpdateInfoFieldListCompletedEventHandler(ByVal sender As Object, ByVal e As GetClientUpdateInfoFieldListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClientUpdateInfoFieldListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub UpdateJobInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateJobInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateJobInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetClientProjectsCompletedEventHandler(ByVal sender As Object, ByVal e As GetClientProjectsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClientProjectsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetCustomersCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPJobCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPJobsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPJobsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPJobsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPCallCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPCallCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPCallCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPCallsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPCallsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPCallsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GMapGetFSPJobCompletedEventHandler(ByVal sender As Object, ByVal e As GMapGetFSPJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GMapGetFSPJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPClosedJobsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPClosedJobsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPClosedJobsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPClosedJobWithOutstandingDeviceCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPClosedJobWithOutstandingDeviceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPClosedJobWithOutstandingDeviceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPJobEquipmentHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPJobEquipmentHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPJobEquipmentHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPAllOpenJobCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPAllOpenJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPAllOpenJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPJobsForBookingCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPJobsForBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPJobsForBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub FSPBookJobCompletedEventHandler(ByVal sender As Object, ByVal e As FSPBookJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FSPBookJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPEscalateJobBookingReasonCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPEscalateJobBookingReasonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPEscalateJobBookingReasonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub EscalateFSPJobBookingCompletedEventHandler(ByVal sender As Object, ByVal e As EscalateFSPJobBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EscalateFSPJobBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPOpenTaskListCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPOpenTaskListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPOpenTaskListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPTaskCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutFSPTaskCompletedEventHandler(ByVal sender As Object, ByVal e As PutFSPTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutFSPTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AddFSPTaskDeviceCompletedEventHandler(ByVal sender As Object, ByVal e As AddFSPTaskDeviceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddFSPTaskDeviceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub CloseFSPTaskCompletedEventHandler(ByVal sender As Object, ByVal e As CloseFSPTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CloseFSPTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPTaskJobPostDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPTaskJobPostDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPTaskJobPostDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPTaskViewCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPTaskViewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPTaskViewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPClosedTasksCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPClosedTasksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPClosedTasksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPJobClosureCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPJobClosureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPJobClosureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPJobEquipmentCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPJobEquipmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPJobEquipmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub DelFSPJobEquipmentCompletedEventHandler(ByVal sender As Object, ByVal e As DelFSPJobEquipmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DelFSPJobEquipmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub UpdateFSPJobEquipmentCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFSPJobEquipmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFSPJobEquipmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AddFSPJobEquipmentCompletedEventHandler(ByVal sender As Object, ByVal e As AddFSPJobEquipmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddFSPJobEquipmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub CloseFSPJobCompletedEventHandler(ByVal sender As Object, ByVal e As CloseFSPJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CloseFSPJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPJobPartsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPJobPartsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPJobPartsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub DelFSPJobPartsCompletedEventHandler(ByVal sender As Object, ByVal e As DelFSPJobPartsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DelFSPJobPartsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutFSPJobPartsCompletedEventHandler(ByVal sender As Object, ByVal e As PutFSPJobPartsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutFSPJobPartsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPPartsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPPartsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPPartsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutFSPMissingJobPartsCompletedEventHandler(ByVal sender As Object, ByVal e As PutFSPMissingJobPartsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutFSPMissingJobPartsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub SetMerchantDamagedCompletedEventHandler(ByVal sender As Object, ByVal e As SetMerchantDamagedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetMerchantDamagedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetJobKittedDeviceCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobKittedDeviceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobKittedDeviceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub ConfirmKittedPartsUsageCompletedEventHandler(ByVal sender As Object, ByVal e As ConfirmKittedPartsUsageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConfirmKittedPartsUsageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub SwapBundledSIMCompletedEventHandler(ByVal sender As Object, ByVal e As SwapBundledSIMCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SwapBundledSIMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPStockListCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPStockListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPStockListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPDeviceListBySerialCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPDeviceListBySerialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPDeviceListBySerialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPStockReceivedLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPStockReceivedLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPStockReceivedLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPStockReceivedCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPStockReceivedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPStockReceivedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutFSPStockReceivedCompletedEventHandler(ByVal sender As Object, ByVal e As PutFSPStockReceivedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutFSPStockReceivedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pBatchID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AddFSPStockReceivedLogCompletedEventHandler(ByVal sender As Object, ByVal e As AddFSPStockReceivedLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddFSPStockReceivedLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub CloseFSPStockReceivedAndSendReportCompletedEventHandler(ByVal sender As Object, ByVal e As CloseFSPStockReceivedAndSendReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CloseFSPStockReceivedAndSendReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPStockReturnedLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPStockReturnedLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPStockReturnedLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPStockReturnedCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPStockReturnedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPStockReturnedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutFSPStockReturnedCompletedEventHandler(ByVal sender As Object, ByVal e As PutFSPStockReturnedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutFSPStockReturnedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pBatchID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AddFSPStockReturnedLogCompletedEventHandler(ByVal sender As Object, ByVal e As AddFSPStockReturnedLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddFSPStockReturnedLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub CloseFSPStockReturnedAndSendReportCompletedEventHandler(ByVal sender As Object, ByVal e As CloseFSPStockReturnedAndSendReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CloseFSPStockReturnedAndSendReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPStockTakeLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPStockTakeLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPStockTakeLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPStockTakeTargetCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPStockTakeTargetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPStockTakeTargetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPStockTakeCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPStockTakeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPStockTakeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutFSPStockTakeCompletedEventHandler(ByVal sender As Object, ByVal e As PutFSPStockTakeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutFSPStockTakeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pBatchID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AddFSPStockTakeLogCompletedEventHandler(ByVal sender As Object, ByVal e As AddFSPStockTakeLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddFSPStockTakeLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub CloseFSPStockTakeAndSendReportCompletedEventHandler(ByVal sender As Object, ByVal e As CloseFSPStockTakeAndSendReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CloseFSPStockTakeAndSendReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AddFaultyOutOfBoxDeviceCompletedEventHandler(ByVal sender As Object, ByVal e As AddFaultyOutOfBoxDeviceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddFaultyOutOfBoxDeviceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPExceptionListCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPExceptionListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPExceptionListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetJobExceptionListCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobExceptionListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobExceptionListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPEscalateReasonCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPEscalateReasonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPEscalateReasonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub EscalateFSPJobCompletedEventHandler(ByVal sender As Object, ByVal e As EscalateFSPJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EscalateFSPJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AddFSPJobNoteCompletedEventHandler(ByVal sender As Object, ByVal e As AddFSPJobNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddFSPJobNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub ReassignJobBackToDepotCompletedEventHandler(ByVal sender As Object, ByVal e As ReassignJobBackToDepotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReassignJobBackToDepotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPCJFPreJobCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPCJFPreJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPCJFPreJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPCJFJobCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPCJFJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPCJFJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPCJFCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPCJFCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPCJFCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GenerateFSPCJFCompletedEventHandler(ByVal sender As Object, ByVal e As GenerateFSPCJFCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GenerateFSPCJFCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pCJFID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPJobSheetDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPJobSheetDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPJobSheetDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub FSPReAssignJobCompletedEventHandler(ByVal sender As Object, ByVal e As FSPReAssignJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FSPReAssignJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub FSPReAssignJobExtCompletedEventHandler(ByVal sender As Object, ByVal e As FSPReAssignJobExtCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FSPReAssignJobExtCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetAdminBulkJobCompletedEventHandler(ByVal sender As Object, ByVal e As GetAdminBulkJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAdminBulkJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutAdminBulkJobCompletedEventHandler(ByVal sender As Object, ByVal e As PutAdminBulkJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutAdminBulkJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPChildrenExtCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPChildrenExtCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPChildrenExtCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPFamilyExtCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPFamilyExtCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPFamilyExtCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetDownloadCompletedEventHandler(ByVal sender As Object, ByVal e As GetDownloadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDownloadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PutDownloadCompletedEventHandler(ByVal sender As Object, ByVal e As PutDownloadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutDownloadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pSeq() As Short
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Short)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetDownloadsByURLCompletedEventHandler(ByVal sender As Object, ByVal e As GetDownloadsByURLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDownloadsByURLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetDownloadCategoryAllCompletedEventHandler(ByVal sender As Object, ByVal e As GetDownloadCategoryAllCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDownloadCategoryAllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetTechFixCompletedEventHandler(ByVal sender As Object, ByVal e As GetTechFixCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTechFixCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub IsTelstraFSPCompletedEventHandler(ByVal sender As Object, ByVal e As IsTelstraFSPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsTelstraFSPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pIsTelstraFSP() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub IsLiveDBCompletedEventHandler(ByVal sender As Object, ByVal e As IsLiveDBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsLiveDBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pIsLiveDB() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub SetJobAsFSPOnSiteCompletedEventHandler(ByVal sender As Object, ByVal e As SetJobAsFSPOnSiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetJobAsFSPOnSiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub FSPCallMerchantCompletedEventHandler(ByVal sender As Object, ByVal e As FSPCallMerchantCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FSPCallMerchantCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetJobFSPDownloadCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobFSPDownloadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobFSPDownloadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetPostcodeFSPAllocationCompletedEventHandler(ByVal sender As Object, ByVal e As GetPostcodeFSPAllocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPostcodeFSPAllocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetMerchantAcceptanceCompletedEventHandler(ByVal sender As Object, ByVal e As GetMerchantAcceptanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMerchantAcceptanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPPartTranCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPPartTranCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPPartTranCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub FSPSavePartTranReceivedCompletedEventHandler(ByVal sender As Object, ByVal e As FSPSavePartTranReceivedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FSPSavePartTranReceivedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetFSPPartInventoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetFSPPartInventoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFSPPartInventoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace
